0:00:01.199,0:00:06.560
hello in this video we're going to review a bit from last time

0:00:04.400,0:00:09.519
and i also want to take a step back and kind of think about all the different

0:00:07.600,0:00:12.880
ways we could write classes uh to represent graphs there's kind of a

0:00:11.120,0:00:16.240
lot of different ways we could do it and um and so i think by kind of looking

0:00:14.960,0:00:19.600
at the big picture we can make those comparisons

0:00:17.600,0:00:23.920
uh from the beginning so first the review part

0:00:20.720,0:00:25.920
um here we have a method that we implemented last time i'm not really

0:00:25.359,0:00:29.199
showing it inside of the class but what we're doing

0:00:28.080,0:00:33.520
is we're trying to search in some sort of tree structure

0:00:30.560,0:00:38.000
recursively for some sort of target right and so i have this node

0:00:35.520,0:00:41.680
and what i might imagine is that i first call this on

0:00:39.040,0:00:44.160
the the root of my tree right whatever node is the root

0:00:42.879,0:00:46.800
and then it's trying to make recursive calls so that it can basically see if

0:00:45.760,0:00:50.960
that value is anywhere right so here i have a

0:00:49.120,0:00:53.840
picture of what the the tree looks like and you can see there's different values

0:00:52.320,0:00:57.520
and different nodes and and kind of depending on you know

0:00:57.039,0:01:01.280
what value i'm searching for i might have to

0:00:59.199,0:01:04.799
check more or less nodes before i have an answer i mean if i'm if

0:01:03.600,0:01:07.920
i'm looking for something that's not even in the tree well then that's what i

0:01:06.400,0:01:11.040
end up having to look at uh everything right so so when i'm looking

0:01:10.720,0:01:16.560
at this it's really i'm doing two recursive

0:01:14.159,0:01:20.960
calls on the same line of code but they're between the or and what

0:01:19.520,0:01:26.159
we're going to see is something called short circuiting

0:01:22.320,0:01:33.040
so when i do this first contains the strength call that first and

0:01:29.680,0:01:35.920
if that's true if the part before the or is true

0:01:34.400,0:01:41.119
then it doesn't really matter what is after it right because um

0:01:37.920,0:01:45.759
true or true is true and true or false is true i guess true or anything is true

0:01:43.759,0:01:50.000
so if this returns true i'll never come down to this one

0:01:47.200,0:01:54.399
if this one is false i have false or well then i have to run that second

0:01:51.200,0:01:58.079
piece actually see what happens okay so maybe i have a few questions

0:01:56.799,0:02:02.640
here but maybe first let's just imagine

0:02:01.119,0:02:08.479
if i was searching for something that doesn't exist

0:02:04.560,0:02:12.000
um i was searching for something that didn't exist maybe like um the letter m

0:02:10.879,0:02:15.360
for example in what order would i would i check

0:02:13.840,0:02:18.640
things if i was trying to starting from the root

0:02:16.319,0:02:22.640
so the very first place i will walk will be up here

0:02:20.080,0:02:26.400
and then based on this code i check the left hand side first

0:02:24.800,0:02:32.160
right so the second place i'll check is b and

0:02:28.640,0:02:35.440
before my call for b even returns b is running the same thing and b is

0:02:34.640,0:02:39.440
trying to check its two children right so the third

0:02:38.080,0:02:42.959
thing i would check would be this down here

0:02:39.840,0:02:46.400
y the fourth thing would be x uh eventually i did over here

0:02:44.400,0:02:49.920
right after all that had returned then finally over here

0:02:47.680,0:02:52.400
and so that one would be the order of what would happen if i was searching for

0:02:51.280,0:02:57.280
something that doesn't um exist in the tree and um and it turns

0:02:55.200,0:03:01.440
out that when i'm searching for say z um it's going to be just as slow right

0:03:00.319,0:03:04.879
because that's really kind of in that last place i check so

0:03:03.120,0:03:08.959
i'll return true but only after i've already looked at

0:03:06.319,0:03:12.640
looked at everything right so my circle circle

0:03:09.440,0:03:16.720
six there okay so what if i'm searching for

0:03:13.280,0:03:20.560
c um again i can just read off the answer after i figure out this ordering

0:03:18.720,0:03:25.280
the real challenge is that i go deep on the left hand side

0:03:22.080,0:03:28.400
before i get to c so so even though c is pretty near the root guess what it

0:03:27.120,0:03:32.080
doesn't matter um because i want to kind of check over

0:03:30.640,0:03:35.200
everything over here i'm going to end up checking x

0:03:33.760,0:03:37.599
before i get to c right so i'm just going to make a note of that then we end

0:03:36.959,0:03:41.920
up checking x first and eventually where i learned

0:03:40.319,0:03:46.239
strategies right i mean right now i'm kind of

0:03:42.799,0:03:48.480
doing this what i call search order um where i eventually learned something

0:03:47.360,0:03:52.720
called breadth first search where i could draw you know one

0:03:49.680,0:03:58.799
two three four five six and that would help us find things near the root

0:03:54.720,0:04:03.519
um kind of first right okay what if i what if i am looking for c what will

0:04:01.840,0:04:07.360
happen then well eventually when i get to here right

0:04:05.760,0:04:11.280
so let's say i'm calling this on c which is like the fifth thing i do right

0:04:09.040,0:04:17.680
so i'm calling this on c you know i can actually return

0:04:14.319,0:04:21.120
i can actually return before i even have to do this recursive

0:04:19.040,0:04:25.759
call right so i actually never actually have to look at c's children

0:04:22.960,0:04:32.880
and so the answer on this one is just well i would have to look at five nodes

0:04:29.759,0:04:37.199
okay let's head over here and on the right i have some sort of

0:04:34.800,0:04:40.479
venn diagram showing you the different kind of categories and subcategories of

0:04:39.360,0:04:44.160
graphs i mean most broadly a graph is anything

0:04:42.720,0:04:49.840
with nodes and some edges between those nodes um

0:04:47.759,0:04:53.919
we've seen different kinds of edges right like we've seen um

0:04:51.280,0:04:56.000
you know maybe i have two nodes that look like this and the edge would be

0:04:55.360,0:05:01.199
that that would be undirected if i have an arrow

0:04:59.199,0:05:05.600
like that that would be an example of a directed graph

0:05:02.240,0:05:08.400
right so not all um not all graphs have directed edges but some do so a directed

0:05:07.520,0:05:11.680
graph is a kind of graph the way i'm putting

0:05:10.639,0:05:20.160
that over here is g is is draft dg is a directed graph

0:05:16.639,0:05:23.680
um what is a dag so a dag is a subcategory of that so you kind of

0:05:21.840,0:05:28.560
see as i add more rules it's kind of fewer

0:05:27.039,0:05:32.080
fewer graphs fall into that category right that's why this is a smaller

0:05:29.840,0:05:36.840
circle right every dag is a directed graph but there are some

0:05:34.800,0:05:40.320
directed graphs that are not dags right so that means i have to be a

0:05:38.960,0:05:48.639
cyclic um right there's no cycles

0:05:44.400,0:05:54.080
what about a tree a tree is a type of dagger i'm just writing t

0:05:50.240,0:06:00.319
here that has exactly one root and except for the root every node has

0:05:57.199,0:06:04.800
exactly one parent so you can kind of imagine things that

0:06:02.880,0:06:09.600
are dags but not trees right i mean i guess if i had two islands

0:06:06.319,0:06:14.720
that would be a dag um if i had things that kind of

0:06:10.240,0:06:20.080
uh you know if i have four nodes that are like this but if i kind of

0:06:17.520,0:06:23.919
branch out and then come back together um that would be an example of a dag

0:06:22.319,0:06:27.039
that is not a tree right so there's lots of tags that

0:06:25.280,0:06:29.440
aren't our trees right but every tree is a dag

0:06:29.600,0:06:35.199
these next things are kind of defining different structures

0:06:32.960,0:06:39.280
that have additional constraints on trees

0:06:36.000,0:06:41.759
right so binary binary means two and so a binary tree

0:06:40.319,0:06:45.199
is just a regular tree that has all these other constraints

0:06:43.440,0:06:48.960
and then the additional rule that nodes have at most to children

0:06:47.680,0:06:52.560
they might have one child they might have zero child zero child then it's a

0:06:51.120,0:06:58.720
leaf um a length list has the property that

0:06:56.880,0:07:02.400
you know every node has in most one child and so of course

0:07:00.800,0:07:04.960
you know if you have at most one child you it's also true that you have at most

0:07:04.080,0:07:10.080
two children and so i've drawn linked lists over here

0:07:07.599,0:07:14.720
as a subcategory of binary tree right binary some binary trees will

0:07:13.199,0:07:18.319
have nodes with two children that would not be a linked list but

0:07:16.000,0:07:21.680
otherwise uh it is and like this is kind of just like a chain of nodes

0:07:19.840,0:07:24.000
right or what each one points to the next

0:07:24.080,0:07:30.160
other thing over here is the binary search tree

0:07:27.759,0:07:34.160
and that's really kind of today's talk talk um

0:07:31.199,0:07:38.560
in the upcoming videos and that one doesn't so much have to do

0:07:36.319,0:07:41.919
with the structure of the nodes and values

0:07:40.080,0:07:45.919
of the nodes and edges what it really has to do with is the values

0:07:44.160,0:07:49.680
inside of each node right so the metadata

0:07:47.280,0:07:51.680
and and so you can imagine any binary tree

0:07:50.560,0:07:55.759
and you can imagine looking at the values in there and figuring out are the

0:07:54.000,0:08:00.000
values arranged such that this thing is a binary search

0:07:57.599,0:08:04.080
tree and um and so maybe let me kind of um draw

0:08:03.120,0:08:07.919
something like this so i may have some sort of value here

0:08:06.319,0:08:11.199
like maybe five and maybe that's my root and then i

0:08:09.360,0:08:14.639
might have a left and right child and and maybe there's some sort of um

0:08:13.120,0:08:20.240
note over here maybe it's like three and this whole area over here

0:08:18.479,0:08:25.680
right i mean i might have lots of lots of nodes over here

0:08:22.400,0:08:31.520
and the rule right is that everything that left subtree

0:08:27.599,0:08:38.080
is less than that parent right so everything over here would be

0:08:34.640,0:08:42.640
less than 5 and everything over here would be greater than

0:08:40.080,0:08:46.399
than five right and this is a recursive rule

0:08:43.279,0:08:48.880
right so um it's when i'm talking about left and

0:08:46.880,0:08:50.880
sub trees and right sub trees i'm just talking about the parent doesn't have to

0:08:50.080,0:08:54.640
be the root so if i have three here well guess what

0:08:52.959,0:08:57.440
everything you know if i have another sub tree over here

0:08:56.080,0:09:00.560
all these things would be less than three all these things would be greater

0:08:59.839,0:09:03.440
than three and if you think about it that actually

0:09:01.760,0:09:06.959
kind of narrows down a lot what could go here

0:09:03.920,0:09:09.760
right because it's in the right subtree of

0:09:07.279,0:09:12.240
three so it has to be bigger than three the left subtree of five so it'd have to

0:09:11.440,0:09:15.200
be less than five so i guess this value

0:09:13.920,0:09:19.600
here anything that would be in here would have to be between

0:09:16.640,0:09:22.320
uh three and five let me just clean that up a bit

0:09:20.880,0:09:26.720
okay so that's going to be our focus for today um

0:09:24.959,0:09:32.399
so so kind of looking at all of these things we can talk about this idea

0:09:28.800,0:09:36.080
of um weak connectedness uh we connectedness only really makes

0:09:34.320,0:09:41.839
sense in the context of directed graphs because by definition

0:09:40.240,0:09:47.680
when i'm asking whether something is weakly connected i immediately say

0:09:44.959,0:09:49.440
ignore the direction of the edges right so

0:09:48.240,0:09:54.480
so let's say i'm trying to figure out if this thing is is weakly

0:09:51.680,0:09:57.120
connected what i would do is i would ignore it and i try to get this picture

0:09:55.920,0:10:00.480
down here and then i'd say well is this thing

0:09:58.320,0:10:04.240
connected and of course this thing is connected because

0:10:02.240,0:10:08.000
you know wherever i start i can get to any other node right it's kind of

0:10:06.800,0:10:12.640
there are no islands right i can get around however i want and so all of

0:10:09.920,0:10:16.160
these structures kind of given the fact that there's just

0:10:14.240,0:10:20.560
like one route and everything is kind of branching off from that

0:10:18.079,0:10:24.320
all of these things will always be weakly

0:10:21.519,0:10:27.440
connected in general they won't be strongly connected right so this is an

0:10:25.920,0:10:32.399
example of a tree it's not connected in the strong sense

0:10:30.079,0:10:35.519
because i can't get from d to a well for that matter i can't get

0:10:34.800,0:10:39.440
from b to a or for b to c so if there's just like

0:10:37.920,0:10:42.160
one pair of nodes where i can't get more from one to other

0:10:40.560,0:10:44.480
it's not fully connected but it is weakly connected because i can get

0:10:43.360,0:10:47.839
anywhere if i if i ignore the directions

0:10:48.880,0:10:54.480
so when we're building all these different kinds of graphs

0:10:53.040,0:10:57.200
like the first thing you always do when you're building a graph is you think

0:10:55.600,0:10:58.959
about what your node class will be looking like

0:10:57.920,0:11:03.519
and so here i have kind of three different node classes

0:11:00.959,0:11:05.839
and they each have different attributes right i mean i might have a next

0:11:04.720,0:11:08.959
attribute um here i have a list of children that's

0:11:07.839,0:11:12.399
my attribute um here i have two attributes a left

0:11:10.640,0:11:16.399
child and a right child and and so maybe at least initially i

0:11:14.480,0:11:24.640
want you to think about or um for let's say these three

0:11:20.959,0:11:28.000
these three right here which of these which of these three matches with which

0:11:27.680,0:11:32.240
of these three over here and i'm just going to

0:11:30.000,0:11:36.720
give you a a moment to think about that so pause me

0:11:33.760,0:11:45.120
until you have an answer and and then play again

0:11:42.000,0:11:48.240
okay so let's start with um let's start with

0:11:45.440,0:11:52.160
uh length less maybe that's the easiest one

0:11:48.880,0:11:56.720
so it's a tree such that nodes each have at most one child so either have zero

0:11:54.000,0:11:59.760
children or one children and um and so sometimes i'm looking over

0:11:58.480,0:12:03.040
here i'm like well i could have two children here

0:12:00.959,0:12:09.120
any number of children here this is the only one where i kind of have

0:12:06.000,0:12:13.600
you know exactly one i have exactly one child right so this

0:12:10.240,0:12:19.680
linked list goes up here and that is connected to a a binary tree

0:12:17.360,0:12:24.800
where i have almost two children um well that's the one on the bottom

0:12:21.680,0:12:27.839
here right right i have my left child and my right

0:12:26.399,0:12:30.959
child and in both of these cases right i

0:12:29.440,0:12:34.480
always say at most so i mean this could be none in which case

0:12:32.240,0:12:38.880
i have no children one or more of these could remain none so i could have

0:12:36.000,0:12:41.839
zero or one children uh but neither of these designs a or c

0:12:40.560,0:12:45.120
would allow more than that and that's why they're kind of these more uh

0:12:43.600,0:12:51.279
restricted things um a tree in general right um

0:12:49.920,0:12:57.440
you know i could have any number of children for a node and so i might have

0:12:54.560,0:13:00.399
i'll just try to draw this from this one this one right here where i have any

0:12:58.800,0:13:05.040
number of children and and now just

0:13:03.680,0:13:08.720
one thing i want to kind of point out right is that i'm just talking about the

0:13:07.040,0:13:13.839
attributes now what attributes would i have for each of these cases

0:13:10.480,0:13:19.680
uh but that's not the whole picture right i mean when i'm doing this there's

0:13:17.680,0:13:25.360
nothing really kind of stopping me from having two nodes be each other's

0:13:23.120,0:13:28.959
children right like um b is the child of a and a is the child

0:13:27.519,0:13:31.920
of b right so just that i have these attributes here i

0:13:30.720,0:13:34.320
mean that limits the flexibility somewhat

0:13:32.800,0:13:37.920
but you know if i want to kind of use this for a tree i'm going to have to

0:13:36.160,0:13:40.560
have other code that's kind of careful about

0:13:38.240,0:13:44.240
what i put in this list of children um so that i actually end up with a tree in

0:13:41.920,0:13:48.160
the end so what about these other three if i

0:13:46.240,0:13:55.760
want to have like a dag or a directed graph

0:13:51.199,0:13:59.760
or kind of a graph in general well it turns out that these all also

0:13:59.839,0:14:09.199
have this style just like that right i'll have to be

0:14:07.519,0:14:13.680
kind of more careful like if i have a more restrictive type right like

0:14:11.040,0:14:18.240
tree is more uh restrictive than dag which is more restrictive than

0:14:15.360,0:14:21.760
directed graph if it's more restricted i'll have to be careful about what i put

0:14:19.920,0:14:28.160
in that list of children right um what about what about if i kind

0:14:25.120,0:14:34.560
of want to graph in general um and let's say i want a graph that is

0:14:31.680,0:14:40.800
not necessarily directed um it turns out that even that i could use this design

0:14:37.680,0:14:43.920
and and the way that i can represent that

0:14:41.120,0:14:48.959
is that whenever i have a non-directed edge

0:14:45.120,0:14:53.839
between two nodes i can represent that non-directed edge

0:14:50.959,0:14:56.639
with two directed edges right if kind of uh

0:14:54.399,0:15:03.440
you know let me kind of draw it this way right so if i have a

0:14:59.120,0:15:07.440
and i have b um you know i could have a non-directed edge like that but

0:15:05.839,0:15:11.760
for simplicity what we'll often do is we'll just kind of

0:15:09.120,0:15:15.360
store two edges like that and we'll call those two

0:15:12.959,0:15:20.240
really kind of a non-directed edge and and because that's so common

0:15:17.199,0:15:24.399
is why um is why this first type of graph right

0:15:23.120,0:15:26.959
graphs in general are also represented with this so you

0:15:25.920,0:15:31.519
can definitely see this is kind of the most common

0:15:28.320,0:15:34.079
uh general pattern that people do and honestly right i mean you could use this

0:15:33.279,0:15:38.240
for everything right i mean uh i could just try to be

0:15:36.720,0:15:42.160
careful to make sure i never put more than two children in there and then i

0:15:40.480,0:15:45.440
could use that to represent a binary tree

0:15:44.079,0:15:51.120
what about this last case down here a binary search tree

0:15:47.519,0:15:56.000
that one also will probably usually be this design right here and i'll just try

0:15:54.480,0:15:58.800
to be careful about what my left and right children are

0:16:00.079,0:16:06.320
so we've spent a lot of time talking about

0:16:03.279,0:16:10.959
node classes and it's not unusual for that to be the only class you create

0:16:08.959,0:16:14.320
when um when you're kind of designing graphs

0:16:12.560,0:16:18.959
now you're also going to see cases where people might have

0:16:15.839,0:16:22.000
um separate classes for edges right i mean we've been doing edges as just

0:16:20.560,0:16:25.600
well my node has an attribute that refers to another

0:16:24.079,0:16:29.440
node but sometimes people actually have separate classes for that

0:16:27.279,0:16:33.199
and the main case for that is that we might have some

0:16:30.639,0:16:35.680
edge metadata so for example let's say we were talking about like a social

0:16:34.560,0:16:39.680
network i might have a node for each friend and

0:16:38.959,0:16:42.959
uh and i have an edge between them because

0:16:41.040,0:16:46.880
they're friends but i might want to remember things like well

0:16:44.720,0:16:50.240
um you know when did their friendship start

0:16:48.480,0:16:52.959
in which case i need to store that information somewhere so instead of

0:16:51.839,0:16:57.199
having one node refer to another node i'll i'll have the

0:16:56.079,0:17:01.839
first node refer to an edge object that will tell

0:17:00.320,0:17:06.240
me a little bit about the relationship and that edge object

0:17:03.279,0:17:08.000
will refer to the final um to the final node

0:17:06.799,0:17:10.880
maybe let me just kind of draw that to make it very clear i don't kind of have

0:17:09.520,0:17:15.280
a node you know the simple case we've seen a

0:17:13.120,0:17:19.280
lot is we'll have kind of one node uh refers to another but where i have

0:17:17.679,0:17:22.559
like an edge object in the middle right so this will refer to this and

0:17:21.280,0:17:26.959
this will refer to this and because this is a full object i can

0:17:25.439,0:17:29.520
put whatever extra information in there i would like

0:17:29.760,0:17:36.000
um why do i want to sometimes have a separate graph class i have an example

0:17:34.320,0:17:38.880
down here of what a graph class might look like

0:17:37.120,0:17:43.360
um there are different cases where this can show up

0:17:40.480,0:17:46.320
um when we're just having kind of only a node class

0:17:44.160,0:17:49.039
well usually there's like one root node and and we can use that to find all the

0:17:47.840,0:17:54.480
other nodes um that's not so great if my graph has

0:17:52.320,0:17:57.120
multiple roots for example right how can i uh

0:17:55.600,0:18:01.280
find all my multiple roots it's kind of weird to have a few variables around

0:17:59.760,0:18:03.280
for a single graph it's nicer to just have one variable that refers to the

0:18:02.559,0:18:06.559
graph and from there i could find all the

0:18:04.559,0:18:09.840
roots so so it wouldn't be uncommon to have kind of a

0:18:07.600,0:18:12.840
some sort of list or dictionary of the roots or maybe even of every node in the

0:18:11.520,0:18:17.120
structure um if i have some constraints so for

0:18:15.679,0:18:20.160
example i don't want directed edges i want

0:18:18.880,0:18:23.600
everything to be kind of bi-directional then what i could

0:18:23.280,0:18:28.000
do is i could whenever i'm trying to make

0:18:26.240,0:18:30.640
one node refer to the other i could add another

0:18:28.799,0:18:33.520
attribute back in the same direction right so i could have some sort of graph

0:18:32.160,0:18:39.039
class and then i could add edges there between

0:18:36.559,0:18:44.880
between two nodes and and then you can see what i can do right here right i can

0:18:41.039,0:18:51.280
have node 1 append a link to b and have node 2 append a link to node 1.

0:18:49.120,0:18:57.840
right so that's why we might want to have a have a graph class in kind of

0:18:52.880,0:19:03.840
certain cases you

