0:00:01.680,0:00:06.720
hello in this video i will be talking a little bit um about how we can score our

0:00:05.680,0:00:10.800
models um on our training data and um scoring

0:00:09.440,0:00:14.559
them is going to involve learning some new metrics and terminology

0:00:13.040,0:00:18.320
uh it turns out there's different kinds of errors and

0:00:16.400,0:00:21.680
and if sometimes we'll care more about one kind of error than another

0:00:20.240,0:00:25.359
we might want to use different metrics to deal with that case

0:00:23.519,0:00:30.320
um so for this i have some really simple dummy data

0:00:26.560,0:00:33.520
uh basically i have this data frame um that has an x column and that's column

0:00:32.880,0:00:37.680
is number and then the y column is a is a boolean

0:00:36.480,0:00:42.000
and it's true whenever x is positive and false when

0:00:41.280,0:00:45.840
it's negative okay so not much data there and um and

0:00:44.399,0:00:48.960
just for simplicity i'm kind of breaking it into

0:00:47.120,0:00:52.000
the first half and the second half i wouldn't normally do this right because

0:00:50.559,0:00:55.199
maybe the data is not shuffled and maybe i'm kind of

0:00:53.840,0:00:57.520
getting very different data in the two half so this is just trying for an

0:00:56.399,0:01:03.359
example there i have it i have my training data

0:01:00.559,0:01:06.560
my test data down here and if i want to try to figure out what is the

0:01:04.320,0:01:11.360
relationship between y and x and then measure the model's

0:01:08.799,0:01:14.000
understanding of that relationship i'm going to use some sort of scoring

0:01:12.880,0:01:17.920
function all right so i'm going to do this whole

0:01:14.479,0:01:20.479
logistic regression um remember this is not really a regression it's actually a

0:01:19.439,0:01:24.799
classifier right because i have this categorical

0:01:22.880,0:01:28.640
data that i'm trying to protect and so i'm going to train one of those

0:01:26.240,0:01:34.640
and then i want to score it so first step right is i'm going to say lr

0:01:31.119,0:01:43.759
equals logistic regression rate and um and then i'm going to say

0:01:39.079,0:01:48.159
lr.fit and when i'm fitting let me actually just try to run this

0:01:46.079,0:01:50.960
once i run i can actually set shift tab and get a hint

0:01:49.680,0:01:54.399
i might have to give it the x data and the y data and so i'm going to give it

0:01:52.960,0:01:59.439
both those things from the training data first and so i'm going

0:01:57.439,0:02:02.640
to say training data and um and then the columns i want are

0:02:01.280,0:02:06.560
just x and the thing i'm trying to predict is

0:02:05.439,0:02:10.800
just the y value just like that and then after i do

0:02:10.319,0:02:15.599
that i can basically run a command that's

0:02:14.080,0:02:20.000
very similar and that command is score i can evaluate

0:02:18.000,0:02:26.400
how well it does on the test data

0:02:23.280,0:02:30.640
and i get 0.75 um so what is this score function doing um

0:02:28.720,0:02:34.239
it turns out it's a shortcut and i'm just going to show you a little

0:02:32.080,0:02:39.440
bit in the documentation what it's doing if i head over here i see that the score

0:02:35.920,0:02:44.560
function or the logistic regression is giving me the mean accuracy and if

0:02:42.239,0:02:49.440
you look at other estimators they might be doing other kinds of uh

0:02:47.120,0:02:52.640
using other metrics for the scoring okay so mean accuracy um so that's the

0:02:51.599,0:02:55.599
default here but it turns out there's lots of

0:02:53.599,0:03:00.720
different metrics we could use and so if i go to the metrics page

0:02:56.959,0:03:05.920
for um scikit learn i can see that hey there's a whole bunch of metrics

0:03:03.120,0:03:10.239
here related to classification uh clustering which we haven't talked

0:03:07.440,0:03:13.440
about yet and then a whole bunch related to

0:03:10.640,0:03:16.080
regression as well and so the one i'm using

0:03:13.920,0:03:18.800
right now the default is that accuracy score

0:03:16.959,0:03:22.239
right you saw that how it's saying here that we're um just getting the accuracy

0:03:20.879,0:03:26.480
and accuracy is very simple it's all what percentage of the times

0:03:24.159,0:03:29.360
um did we get it right and so i certainly could have instead of using

0:03:27.920,0:03:32.400
that score function i could have used this one myself and i

0:03:31.280,0:03:34.400
think that's a good thing to do right now

0:03:33.120,0:03:38.400
because once you understand how to use this manually without the shortcut then

0:03:37.040,0:03:41.280
we'll understand how to use these other functions as well

0:03:40.080,0:03:45.280
okay so as you can see this is my metrics sub module

0:03:43.760,0:03:50.959
and so when i head back here i'm going to do that so i'm going to say

0:03:48.319,0:03:56.400
and this was that page i was just on i am going to say

0:03:52.080,0:04:03.680
from from sklearn dot metrics import

0:04:00.480,0:04:09.040
accuracy score okay and um and let me just run that and what

0:04:06.720,0:04:13.120
i call accuracy score i hit shift tab here um basically what

0:04:11.920,0:04:18.079
i'm doing is i'm saying well what are the true values

0:04:14.640,0:04:21.440
and what did my model predict okay and and so there's different ways i

0:04:19.440,0:04:28.000
could do that i mean i could say well the true values are a and and b

0:04:24.720,0:04:31.040
but i actually predicted a and c and it turns out if i do that well i'm

0:04:29.440,0:04:34.080
just 50 right right so this was my actual values and

0:04:33.280,0:04:38.080
my um my predicted values um so let me

0:04:36.400,0:04:42.240
actually try to get these from up above right so before i was

0:04:39.759,0:04:45.680
trying this score thing and then i was trying to give me my x values

0:04:43.919,0:04:48.800
and my y values and and so i'm going to pull pieces from

0:04:47.520,0:04:52.800
this um the first piece i'm going to do is

0:04:51.040,0:04:57.360
i'm going to actually figure out what the predicted values are so those

0:04:56.080,0:04:59.360
are going to be the predicted values i actually have to call predict here

0:04:58.479,0:05:03.440
instead of score right when i'm predicting i'm not giving

0:05:01.280,0:05:08.720
it any y values right predict tells me what the y values are

0:05:05.759,0:05:12.720
and um and then i also have to have my actual

0:05:09.440,0:05:18.000
right and my actual was just the second piece from b4

0:05:14.560,0:05:22.720
on that column so maybe actually let me just do this i'm going to say

0:05:20.000,0:05:28.479
let me look at the actual values and the predicted values

0:05:25.199,0:05:33.280
as a list okay and i can say actual were true true

0:05:31.360,0:05:38.639
false false but i'm actually getting true false

0:05:36.320,0:05:41.039
false false and so the second one is the error right so i'm going to be rolling

0:05:40.320,0:05:46.639
25 of the time and so accuracy is actually

0:05:43.680,0:05:49.759
going to be 75 which is what we saw before and we're

0:05:48.080,0:05:54.800
going to see it here too when we actually pass in

0:05:52.800,0:05:58.639
these two things i pass in the actual values

0:05:55.919,0:06:04.639
and those predicted values all right so i'm going to get that 75 percent

0:06:01.440,0:06:08.000
okay now so that works fine uh but there's going to be cases where we don't

0:06:06.479,0:06:12.479
want to just know how often we're right but we want to know about

0:06:09.919,0:06:16.880
um uh you know about what kind of mistakes we're making

0:06:13.759,0:06:20.400
right so for example um well let's imagine different things that this

0:06:18.240,0:06:23.919
y column might be let's say that this y column means it's

0:06:22.240,0:06:28.240
a good investment maybe it's um for a stock or something

0:06:26.639,0:06:31.680
um i don't need to know about every good investment

0:06:29.280,0:06:34.479
but if i have some system that tells me like hey these are some good investments

0:06:33.199,0:06:37.759
and it's always right and it doesn't tell me about every good

0:06:35.600,0:06:43.759
investment that's a pretty good system um in contrast maybe this is telling me

0:06:41.199,0:06:47.759
um i don't know is somebody contagious for kova

0:06:44.639,0:06:52.160
19 or whatever right and in that case um it's much safer to make the mistake of

0:06:50.400,0:06:55.039
saying they are contagious even though they're not

0:06:53.199,0:06:58.800
so there's different kinds of errors false positives and false negatives

0:06:57.199,0:07:02.319
and so there's a lot of metrics based on that and the simplest place to start is

0:07:00.960,0:07:06.319
with something called a confusion matrix and a confusion

0:07:04.800,0:07:09.840
matrix shows the categories that things

0:07:07.919,0:07:13.280
actually are and then how they mistakenly get classified as

0:07:12.000,0:07:16.560
other things and so just like before just like we

0:07:14.639,0:07:20.319
have an actual a predicted list and we have a confusion matrix where i

0:07:18.080,0:07:24.160
do the same thing so imagine i had pictures of animals

0:07:22.000,0:07:27.840
and um and you know i had four dogs three cats and two mice

0:07:26.400,0:07:30.080
and but then i have some machine learning system that's looking at those

0:07:29.039,0:07:35.280
pictures and is maybe predicting these other

0:07:31.520,0:07:40.800
things what i could do is i could um create a confusion matrix using scikit

0:07:38.800,0:07:45.520
learn right this is also under metrics just like accuracy score so i can create

0:07:44.400,0:07:49.199
one of these and um and just like with the accuracy

0:07:47.199,0:07:54.560
score i can put the true values and then the predicted values just like that so

0:07:50.800,0:07:57.759
i say actual and predicted and um and this is a little bit

0:07:56.639,0:08:02.080
confusing because um each one of these values is

0:08:00.720,0:08:06.240
kind of showing us how many uh categories fall into like a

0:08:04.319,0:08:09.680
specific actual category in a predicted category

0:08:07.759,0:08:13.199
and it's not really clear to line it up right well as this first row dog or is

0:08:12.080,0:08:17.120
it cat and so what people will often do right

0:08:15.120,0:08:22.800
is that they'll say labels like this and just to control the

0:08:21.039,0:08:29.199
order so for example i want to say like um at

0:08:24.720,0:08:32.880
a dog mouse just like that and um and then if i pass in these

0:08:31.039,0:08:37.279
labels uh it's gonna be a little bit different

0:08:34.159,0:08:41.360
right whereas if i say dog you can see these numbers switched a

0:08:39.039,0:08:45.600
little and another reason for this besides just controlling the order right

0:08:43.360,0:08:49.040
so that makes sense is that i could um you know maybe there's things that i

0:08:47.600,0:08:55.200
know exists but didn't even show up in the data right there's no horses

0:08:50.640,0:08:57.600
right um so so let me actually really kind of talk about what these

0:08:56.399,0:09:01.040
numbers mean i think it'll be a little easier to put in a data frame

0:08:59.600,0:09:05.839
and um and so i'm going to put this in a confusion matrix here

0:09:03.440,0:09:10.720
and now let me put this in a data frame a pd.data frame

0:09:08.320,0:09:15.120
confusion matrix and then when i'm creating a data frame from this

0:09:12.080,0:09:18.640
both the index and column labels are going to be the same

0:09:16.320,0:09:21.760
right so i'm going to have it just be like this

0:09:20.320,0:09:26.959
and and so when i'm looking at this confusion matrix what does it mean

0:09:23.600,0:09:35.839
so the row means what it actually is and

0:09:30.240,0:09:40.720
the column is going to be what it got as right so i can see in this right that

0:09:38.480,0:09:44.080
there's four dogs and um of those four dogs that

0:09:43.200,0:09:49.440
practically classified three of them as dogs but one

0:09:47.040,0:09:54.800
of the dogs was mistakenly identified as a cat okay it looks like

0:09:52.399,0:09:59.920
there are three cats in the system two of them were correctly identified as

0:09:56.399,0:10:03.519
cats and one was considered a dog and then i can see other things here

0:10:01.200,0:10:06.720
like well the system's really good at mice right it always correctly calls the

0:10:05.440,0:10:09.360
mice and doesn't mix them up with anything

0:10:07.680,0:10:11.760
and um and so this is useful right when i have an estimated matrix i can see

0:10:10.800,0:10:18.160
what ways um the classifier is

0:10:14.959,0:10:23.120
confused since it's called a um you know a confusion matrix right it's

0:10:19.600,0:10:29.279
trying to how the model is confused right um so hopefully that's helpful

0:10:26.320,0:10:33.279
now uh it's very common that we'll be having these comm uh

0:10:30.399,0:10:37.360
confusion matrices where the classes instead of being

0:10:34.720,0:10:40.720
um you know different animals it might just be true and false that that would

0:10:39.040,0:10:43.920
be for a binary classifier oriented to have these true and false values

0:10:42.480,0:10:47.040
and so let me actually go back to what i had before right when i was computing

0:10:46.399,0:10:51.600
this um accuracy score and let me create a

0:10:50.000,0:10:55.120
confusion matrix here and maybe i'm just going to copy some of

0:10:53.360,0:11:01.839
this down here guys you might grab this

0:11:02.160,0:11:17.680
and in this case the labels are false and true

0:11:15.360,0:11:20.160
and it doesn't do anything okay so i have these different categories

0:11:19.040,0:11:23.680
and just like before i think it's going to be helpful to put this in a data

0:11:22.160,0:11:27.600
frame right i'm going to put a data frame here

0:11:26.079,0:11:30.640
just like that and so here again the row is telling me

0:11:29.839,0:11:34.399
what it actually is and then uh the column is telling me

0:11:33.680,0:11:37.920
how those got got classified and ideally in a perfect

0:11:36.560,0:11:41.839
world right everything will be on the diagonal right that means

0:11:39.920,0:11:47.360
um there were no mistakes made there was no confusion

0:11:43.920,0:11:50.399
okay so i have that and um and it turns out there are special names for each of

0:11:48.800,0:11:54.839
these for values and so i'm just going to go

0:11:52.560,0:11:59.519
through this quickly um the the

0:11:57.680,0:12:04.320
top left one actually let's start with the bottom right

0:12:00.880,0:12:08.480
so if i go to uh if i go to let me put this in a date actual data

0:12:05.920,0:12:12.880
frame uh that's gonna be my confusion matrix is a

0:12:10.399,0:12:19.200
data frame now okay and um and

0:12:15.920,0:12:23.120
if i go i look 1 1 that's going to be that bottom right

0:12:20.190,0:12:27.760
[Music] that's going to be called true

0:12:26.320,0:12:30.160
positives and you're going to practice kind of remembering these these words

0:12:29.760,0:12:33.440
they're important terminology all right so i'm

0:12:32.560,0:12:36.000
going to do this and then if i had been smart with this

0:12:34.800,0:12:40.880
example i would have made sure all these numbers were different so we could

0:12:37.760,0:12:46.399
more easily identify right and and then the other number is in the top left

0:12:43.600,0:12:49.920
and those are true negatives right so true means that

0:12:48.000,0:12:54.639
that the model is doing the correct thing right so in this case i have

0:12:52.480,0:13:00.560
a one you know what i should really do is i should do it like this

0:12:56.639,0:13:03.839
through positives through negatives right people often abbreviate it this

0:13:02.240,0:13:06.959
way and then there's the mistakes right the

0:13:05.200,0:13:11.920
mistakes are false right so i'm gonna say false

0:13:08.639,0:13:18.480
and false and um and so what are these called the false positives

0:13:14.639,0:13:24.480
well where are those so false positive means that this column

0:13:21.760,0:13:29.680
right and so it should be false right that's what that actually is in the data

0:13:27.040,0:13:32.880
but the it gets classified as true right so

0:13:30.639,0:13:36.560
what does that mean that means i'm in row zero

0:13:33.680,0:13:41.120
column one and then the opposite down here

0:13:37.040,0:13:44.480
right sometimes uh it actually is true but the model says it's false that's a

0:13:42.720,0:13:49.040
false negative and um false negative just like that

0:13:47.360,0:13:52.399
right so these are the four different cases i'd have and a lot of the

0:13:50.959,0:13:55.040
statistics we'll be looking at the next video

0:13:53.360,0:14:01.199
are combinations of these and i'll be kind of talking more about why those are

0:13:58.199,0:14:01.199
meaningful

