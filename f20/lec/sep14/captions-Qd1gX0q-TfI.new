0:00:01.199,0:00:05.440
all right so in this video i want to talk a little bit more

0:00:03.840,0:00:11.280
um well i want to start by talking a little bit more about this um

0:00:07.600,0:00:15.040
an operator right bound equals x and l and so rather than using that operator

0:00:13.519,0:00:18.880
that's built into python i wrote some code here that basically

0:00:16.880,0:00:22.480
does the same thing what do we do we take in a list al and

0:00:21.119,0:00:24.960
i've already drawn what that might look like

0:00:23.439,0:00:30.560
we take in a target that we're searching for we loop over

0:00:27.119,0:00:36.800
l and then if we find it we return true we give up we return false and

0:00:34.320,0:00:39.760
so for this particular one rather than trying to break it all into steps and

0:00:38.399,0:00:43.440
count each step i'm just interested let's counting this

0:00:41.600,0:00:48.399
step right here how many times does line of a execute

0:00:45.360,0:00:50.960
in kind of the worst case best case and for these different cases worst case

0:00:49.680,0:00:56.160
best case i can actually think about well what is my target right

0:00:53.440,0:00:59.520
so i think in the worst case right well remember as soon as i find it

0:00:58.000,0:01:03.280
right i return right so maybe let's actually start with the best

0:01:00.879,0:01:06.799
case the best case is that i have eight right if i have eight i'm

0:01:05.760,0:01:11.200
done really fast right i only look at one thing so the

0:01:09.040,0:01:14.240
best case i have one um in the worst case well what does that

0:01:13.439,0:01:17.439
mean in the worst case i guess i would have

0:01:15.840,0:01:22.400
to loop over everything so maybe maybe that means

0:01:20.479,0:01:26.000
something like five right is at the end or maybe something

0:01:25.040,0:01:29.439
like you know negative ones not not even there i guess i would

0:01:27.680,0:01:33.360
kind of uh you know run off the list too so worst

0:01:32.079,0:01:36.960
case i'm gonna have to look at n things and then the average case well

0:01:35.600,0:01:40.320
what is that i guess that's somewhere in the middle

0:01:38.240,0:01:44.479
of the list approximately and that would be about n over

0:01:41.439,0:01:46.960
two steps and so sometimes they'll be asked for different uh

0:01:45.520,0:01:51.600
different of these right unless somebody specifies

0:01:48.640,0:01:54.799
then what they're really asking for is the worst case

0:01:52.880,0:01:58.079
right maybe people are interested in the pathological case

0:01:56.079,0:02:01.680
that was often easier to reason about every once in a while somebody might ask

0:01:59.759,0:02:04.320
you about the average case and that might make a lot of sense too

0:02:03.119,0:02:07.759
right i mean if you have a bunch of kind of representative

0:02:05.840,0:02:13.200
uh things you're looking up maybe you care overall what the average is

0:02:09.759,0:02:16.800
instead of what the worst is okay so we've had a lot of examples that

0:02:14.879,0:02:22.800
are either constant time or um order n um let's talk a little bit

0:02:20.400,0:02:25.680
about sorting the way you've typically sorted things

0:02:24.480,0:02:30.959
if you have a list is you might say l.sort

0:02:27.440,0:02:33.920
and it happens but somebody somebody had to write that function

0:02:32.239,0:02:36.000
right and there's different ways people write sort functions and i have one

0:02:35.599,0:02:39.519
example here maybe the easiest one to understand

0:02:38.800,0:02:42.560
and and our goal right is to start with a

0:02:40.959,0:02:47.599
list like this and when it's all done it should look like this on the right

0:02:44.319,0:02:51.280
things are in alphabetical order and our strategy is going to be this before

0:02:49.440,0:02:55.440
we even look at the code we're going to loop over the whole list

0:02:53.440,0:02:59.280
and find the largest item and kind of put the smallest here

0:02:56.720,0:03:02.239
right so the the smallest item will go here

0:03:00.480,0:03:05.680
where i loop over the remaining items and put the second smallest here

0:03:04.159,0:03:09.519
loop over the remaining two put the smallest here

0:03:07.360,0:03:14.000
and so on and so forth that's a strategy right just figure out one value

0:03:12.080,0:03:17.599
at a time and so when i'm looking at this code what do i see that's going on

0:03:16.159,0:03:21.760
here one let me look at kind of the heart of

0:03:20.080,0:03:25.200
it i have this weird assignment with two values on each side

0:03:23.920,0:03:30.480
what this is going to do is trying to take this value and put it to here

0:03:28.239,0:03:33.440
let's try and take this value and put it to here

0:03:31.599,0:03:36.560
and it does those two things exactly the same time so i actually see that since

0:03:34.959,0:03:40.159
this is joined to here right here you know what those are the

0:03:38.879,0:03:44.159
same two things so really it's just swapping

0:03:41.200,0:03:47.200
the values at position i the values that um

0:03:45.040,0:03:50.480
at this index men it just swaps those two values

0:03:48.319,0:03:56.000
and that's a fast operation right time swapping values in a list is as fast

0:03:53.360,0:03:59.360
uh you know compared to let's say like adding and removing something at the

0:03:57.360,0:04:03.360
beginning this loop is kind of like we're looping

0:04:02.080,0:04:06.159
over all the positions to figure out what goes there

0:04:04.720,0:04:10.239
you know first time at position zero what goes in position zero

0:04:07.840,0:04:13.920
well to design i have to loop over from position

0:04:11.280,0:04:18.479
you know zero until the end next time on this loop i'm at position one

0:04:15.920,0:04:22.320
so i loop from position one until the end to find out what

0:04:20.079,0:04:24.800
what goes there so what's going to happen is this

0:04:23.360,0:04:29.600
code is running is i've kind of drawn it out i have my eye here

0:04:26.800,0:04:33.680
and my j here and i'm just going to draw a little

0:04:30.320,0:04:38.800
dot or some symbol every time this code here runs right and i'm going to

0:04:36.720,0:04:42.080
draw the dot to show where what my i and j values are when that

0:04:40.639,0:04:46.240
runs so the first pass i'm going to kind of loop over you

0:04:44.880,0:04:50.800
know for i equals zero right that's that outer loop up here i'm

0:04:48.720,0:04:55.199
gonna loop i'm gonna do that one that one that one that one and what i'm

0:04:53.600,0:04:59.360
gonna find is that a is the smallest value and so what that

0:04:58.160,0:05:06.080
means is that a should switch with b to be in the first place

0:05:03.120,0:05:09.120
right so a a should go

0:05:09.360,0:05:20.880
oops let me see a should go to here and b should go to here okay

0:05:17.039,0:05:27.840
next path so i is one when i is one what do we do we loop in our j loop

0:05:24.000,0:05:31.919
from one until the end right so i'm going to loop

0:05:28.400,0:05:35.840
here here here and i guess b is already the smallest value so b

0:05:33.919,0:05:38.960
gets to stay there okay now i want to figure out what goes

0:05:37.680,0:05:44.720
here right so i is two

0:05:42.000,0:05:47.280
and i'm going to loop over positions two and three to figure out which is smaller

0:05:46.320,0:05:52.880
is this smaller or this smaller and and of course c is

0:05:50.960,0:05:58.000
smaller right so i'm going to swap c and d

0:05:54.479,0:06:05.759
and c goes here c goes here and then d goes here and and

0:06:04.639,0:06:08.080
then when i'm all done i guess the way i've written it is i do something here

0:06:07.039,0:06:11.440
even though of course i'm not trying to do any swaps

0:06:09.520,0:06:14.960
and so what i want you to see here right is if i'm trying to count the total

0:06:12.560,0:06:21.680
number of steps right well what do i get i get

0:06:18.400,0:06:27.199
well in this case i get four plus three plus two

0:06:24.800,0:06:32.080
plus one i guess in general i get something like n

0:06:28.240,0:06:35.680
plus dot dot dot and then one and so what is the complexity of this

0:06:34.639,0:06:39.039
right how much work am i doing and the work is kind of

0:06:37.919,0:06:42.800
represented by this triangle and what i want you to notice

0:06:42.400,0:06:47.520
that is the triangle is half of a square right

0:06:45.360,0:06:52.000
so really the complexity is n squared over two and what we've

0:06:50.880,0:06:57.039
learned is that given that we can have c's we can ignore those

0:06:54.400,0:07:01.360
constant factors so the complexity here is just n squared and um and you can

0:06:59.759,0:07:04.560
actually do faster than that for sorting but that's kind of

0:07:02.960,0:07:09.919
a lot of the easy to understand sort algorithms are are n squared

