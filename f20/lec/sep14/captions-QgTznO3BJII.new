0:00:01.120,0:00:08.480
all right so i've alluded to this a bit um but sometimes we might have a single

0:00:05.600,0:00:12.080
line of code or a single list operation um that's not a step in and of itself

0:00:10.719,0:00:15.200
that actually is not bounded by the list size um you

0:00:14.719,0:00:18.720
know it gets slower when it's bigger um or or

0:00:18.000,0:00:22.320
it doesn't so what i might actually do rather than

0:00:21.199,0:00:26.080
um just think about in terms of you know what lines or steps

0:00:24.400,0:00:31.279
or not i might think about the complexity of a step

0:00:27.840,0:00:35.200
and those that are bounded i might call those

0:00:32.079,0:00:38.960
constant time or order of complexity one right i can always multiply by c

0:00:37.440,0:00:41.520
right so i was trying some fixed amount of work

0:00:39.520,0:00:45.680
there's an upper bound on it um and then other operations maybe they depend on on

0:00:43.360,0:00:49.440
the size of a list where n is the the length of the last

0:00:48.079,0:00:53.440
and so what i want you to do is i want you to look at all of these

0:00:51.199,0:00:57.920
and all these operations and we're going to try to think about which ones

0:00:55.440,0:01:01.039
are constant time and which ones are order

0:00:58.800,0:01:03.199
order n and so for this i have a concrete example down here i have this

0:01:02.800,0:01:07.920
list l and remember that all lists are stored

0:01:06.560,0:01:11.119
within somewhere somewhere within a processes address

0:01:09.680,0:01:15.040
space right so i have an address space here

0:01:12.400,0:01:20.799
and so if i have this list a b c d maybe it's something like this i have a

0:01:17.439,0:01:26.240
b c d and you know i can think of my address

0:01:23.680,0:01:30.720
space as this giant last but this list the list within here right

0:01:28.400,0:01:35.200
i guess l l starts here and so i have my indexing

0:01:34.320,0:01:39.119
like this right these are not details that you

0:01:37.439,0:01:43.119
have to think about when you're programming in terms of well where does

0:01:40.799,0:01:46.079
my list do uh end up in here python takes care of that for us

0:01:44.960,0:01:50.000
but we do have to think about it a little bit in terms of of performance

0:01:48.240,0:01:54.000
when we think about how fast or slow something is

0:01:51.600,0:01:56.880
and um and so let's just start with these two i'm gonna

0:01:55.439,0:01:59.920
walk through two examples and then you're gonna have to think about the

0:01:58.880,0:02:04.719
rest for these two um in this first case

0:02:02.880,0:02:12.720
let's say i'm inserting um let's say i'm inserting

0:02:08.640,0:02:16.000
e um at the end right so if i'm appending that goes to the end

0:02:14.400,0:02:23.120
and then at the beginning i'm inserting let's say that x is f

0:02:19.360,0:02:26.879
right so this is what i'm inserting e and f and what happens well i'm going to

0:02:26.080,0:02:31.440
do the append first right so the append well what

0:02:29.440,0:02:35.120
happens there i i look kind of through the different points in the list

0:02:33.440,0:02:40.560
and i look and well guess what there's a nice empty spot at the end

0:02:37.280,0:02:47.760
so i put e here and that's at index four and and that happens fast right so that

0:02:44.720,0:02:52.560
is an example um this is a this is a fast operation it's

0:02:50.000,0:02:56.160
it's order it's order one right because i didn't

0:02:55.040,0:02:58.159
you know it doesn't matter how long the list is right

0:02:56.879,0:03:04.239
it's the same amount of work to add something at the end now in contrast

0:03:02.319,0:03:10.080
uh when i'm inserting something at the beginning

0:03:05.680,0:03:14.319
that means that f needs to go here at position zero and well what does that

0:03:12.959,0:03:20.239
mean that means that i need to bump a out there position one

0:03:18.640,0:03:23.760
right a bumps from position zero to one which means b has to pump to the

0:03:23.200,0:03:29.040
position c just above the position d right you

0:03:26.799,0:03:33.840
see that i have to move everything over and so really when i want to add

0:03:30.720,0:03:37.280
something at the beginning i have to move everything else over so

0:03:35.599,0:03:39.360
the more things there are the slower it is

0:03:37.760,0:03:46.400
right if there are n items i have to move in items and so this is a slow

0:03:43.040,0:03:48.959
this is a slow operation and i guess i'm circling

0:03:47.200,0:03:55.120
it says to circle those you think our order in so this is an example

0:03:52.480,0:03:57.840
of an order in operation it's slow and why is it useful

0:03:56.159,0:04:01.439
to know for all these when you're programming you want to avoid doing

0:03:59.920,0:04:04.400
order and operations especially as you start dealing with more data right so

0:04:03.040,0:04:08.400
gaining intuition for this is going to help you

0:04:05.519,0:04:11.200
write faster code so pause me for a moment

0:04:09.200,0:04:13.760
and and go through the rest of these and kind of at least gas for each of these

0:04:12.879,0:04:18.079
which are order and or not and then we'll talk through

0:04:16.000,0:04:22.079
it okay i'm assuming you pause me and

0:04:20.799,0:04:26.080
thought about it and wrote down something and now we're going to talk

0:04:23.840,0:04:29.520
through it and so well let's go through i guess popping

0:04:27.759,0:04:34.000
first right so i guess i'm hopping either at the the beginning um

0:04:32.479,0:04:39.040
or the end and maybe not surprising while popping

0:04:36.320,0:04:42.639
at the beginning is very slow right because well if i

0:04:41.520,0:04:45.280
were to delete something here at the beginning of the list then i also have

0:04:44.320,0:04:50.479
to kind of shift everything back right

0:04:49.280,0:04:52.880
i have to shift everything back all right so that would be just as bad as

0:04:51.759,0:04:55.280
really kind of inserting at the beginning

0:04:53.600,0:04:59.199
whereas removing from something from the end no problem

0:04:56.960,0:05:05.600
that would be a fast operation removing something from the end

0:05:02.160,0:05:11.039
okay what about these what if i want to find the value at the beginning

0:05:08.880,0:05:14.800
well it turns out that's fast i just look and i grab it

0:05:12.960,0:05:17.520
and um so i don't want you to get the impression that doing things at the

0:05:15.840,0:05:22.400
beginning of the list is always slow right changing things you know

0:05:20.720,0:05:24.880
well i shouldn't even say changing things well if i change if i change for

0:05:24.320,0:05:28.960
example a to z that'd be fine but adding or

0:05:27.600,0:05:31.280
removing at the beginning of the list is slow

0:05:29.520,0:05:34.880
just looking at things or updating them is fine

0:05:32.880,0:05:39.759
um so so that would be fine that's that's fast

0:05:36.240,0:05:45.199
um what about this i have um l2 dot extend l you know people often

0:05:42.800,0:05:48.639
forget the difference between append and extend

0:05:46.320,0:05:51.600
when i'm appending i'm adding one more item

0:05:49.600,0:05:54.720
but when i'm extending i really want to say that i want to copy everything from

0:05:53.600,0:06:00.400
l over to l2 right so you can imagine

0:05:56.240,0:06:05.759
maybe way out over here i have l2 right and really what i'm saying is i

0:06:02.960,0:06:11.199
kind of want to copy all of l over here

0:06:08.960,0:06:13.759
and and kind of add it to the end of wherever l 2 is

0:06:12.639,0:06:20.560
and so this is something that's definitely as l gets bigger

0:06:16.800,0:06:23.840
um it's going to get slower now extend adds to the end of l2 so it turns

0:06:22.960,0:06:29.840
out that the the size of l2 does not matter

0:06:27.280,0:06:34.160
but the size of l does right as l gets bigger

0:06:30.400,0:06:40.880
this gets slower so order in operation okay um what about this

0:06:37.840,0:06:43.039
uh if i want to get the max um well we've

0:06:41.280,0:06:47.039
found ways to get the max before with a big loop right we loop over all the

0:06:44.560,0:06:51.919
items until we find the biggest and it turns out that's what this

0:06:48.160,0:06:56.080
function is doing that one line of code is just a loop in disguise um what about

0:06:55.039,0:07:02.000
this one um x equals sum that's another loop in

0:06:59.280,0:07:04.240
in disguise uh what about this one this one

0:07:02.400,0:07:09.199
throws a lot of people i want to get the length of it

0:07:05.599,0:07:14.639
um well what's happening there uh well it turns out that we're keeping

0:07:12.319,0:07:18.720
little statistics right so for this list right so for this list l you know i keep

0:07:17.440,0:07:24.000
a note somewhere maybe at the beginning right maybe i keep a note that this has

0:07:20.960,0:07:27.759
a length of five right i have like a little statistic

0:07:25.520,0:07:31.919
here and then if i insert something maybe i

0:07:29.840,0:07:35.680
update that to a sex and so actually getting the length is

0:07:34.319,0:07:40.639
really fast right because i just have to look at this here

0:07:37.440,0:07:43.919
um you can imagine them having done that for the psalm or the max right i mean

0:07:42.720,0:07:46.960
you can imagine every time you add or remove something would update that

0:07:45.280,0:07:51.599
they didn't do that so at least for python lists

0:07:48.479,0:07:56.840
constant time operation for length and these other two max and sum are are slow

0:07:54.560,0:08:04.080
um what about this one when i say x and l um

0:07:58.479,0:08:07.520
let's say well let's say that x was a um i guess i actually find that right

0:08:05.599,0:08:11.599
here at the beginning so then that would be pretty fast

0:08:08.560,0:08:15.520
but what we really want to do when we're doing these kinds of things is we want

0:08:12.960,0:08:18.960
to talk about the worst case and the worst case is that i have to

0:08:17.759,0:08:23.680
check each item right so i guess the worst

0:08:21.919,0:08:28.160
case is that x is something that's not even in the list

0:08:25.120,0:08:34.399
or or maybe it's the last item like e right and in that worst case then

0:08:31.440,0:08:36.640
again i have one of these loops um in disguise

0:08:35.120,0:08:41.680
all right so make a note of this things to avoid inserting at the beginning

0:08:39.760,0:08:46.000
hopping from the beginning um extending finding the max or some or

0:08:44.560,0:08:49.279
searching for something and then see the other things that are

0:08:47.360,0:08:54.240
fast right making changes to the end are fast um

0:08:52.320,0:08:56.720
finding something in the list at a given position that actually turns out to be

0:08:55.680,0:09:01.279
fast um uh no matter what the index is in

0:08:59.680,0:09:05.519
python that's fast and the length is fast so try to write

0:09:02.880,0:09:09.760
for that uses fast things now i i feel like i could have given you

0:09:08.160,0:09:13.360
the impression that all of the things i circled are equally

0:09:11.680,0:09:17.839
slow right they're all border and and really somebody who's

0:09:15.279,0:09:22.080
trying more mathematical or theoretical might be satisfied with that but i also

0:09:20.240,0:09:26.240
want you to be kind of a practical person who's always measuring what

0:09:23.680,0:09:28.880
you're doing right because it turns out that

0:09:26.880,0:09:32.240
some order and things might be slower or faster

0:09:30.160,0:09:35.839
than others and so i may actually head over here

0:09:33.360,0:09:40.080
to hopefully this works on my switch i'm gonna head over here

0:09:37.200,0:09:43.760
to a jupiter notebook and i make sure you do some measurements here

0:09:41.920,0:09:49.440
to compare a few of these operations what am i gonna do i'm gonna do

0:09:45.920,0:09:57.279
um you know what is the cost of psalm max length and i guess i'll also do

0:09:54.240,0:10:02.240
um kind of a um i'll do like extend what is the cost of

0:10:00.000,0:10:05.839
these and um and remember that

0:10:06.160,0:10:13.519
let me just make a note here um these are all linear time

0:10:14.640,0:10:21.760
and this is constant time i remember that linear time just means it's order n

0:10:19.440,0:10:25.040
this means it's order one all right so that's what i want to measure here

0:10:25.519,0:10:29.120
and what we're going to see is that these three things actually kind of vary

0:10:28.399,0:10:33.120
a lot and so this is kind of um i want to kind

0:10:31.440,0:10:35.600
of show you how to do these little mini experiments to measure these things and

0:10:34.800,0:10:38.640
then hopefully you keep that with you and

0:10:37.040,0:10:41.600
when you're writing other code you'll have to do these little experiments and

0:10:39.920,0:10:45.440
get a sense for what's fast and what's slow

0:10:42.720,0:10:49.839
so so here's what i'm going to do um i'm going to create

0:10:46.160,0:10:53.680
a data frame uh for my measurements and i guess to do that i have to say

0:10:51.519,0:10:57.040
from pandas import data frame and you know the other thing

0:10:55.519,0:11:00.880
i may want to import is um i'm right so i'm going to say from

0:10:59.440,0:11:04.079
the time module import the time function and so i'm

0:11:03.279,0:11:06.720
going to take a bunch of time measurements with this and then i put

0:11:05.360,0:11:10.399
them in this data frame and then use that to create some plots

0:11:10.880,0:11:19.600
um so i'm going to do that and why is this slow let me just do a

0:11:16.320,0:11:26.240
kernel okay there we go that's fine okay so what i'm going to do is

0:11:22.640,0:11:31.600
i might have a list maybe i'll start it off being empty

0:11:28.160,0:11:35.920
and i may have a loop right so i may have a loop

0:11:32.800,0:11:40.480
where let's just say for i and range 10 and

0:11:39.040,0:11:47.440
well i guess i'll just append something to my loop or append my list each time

0:11:43.920,0:11:51.760
right and let me just print this okay so so i kind of start with a small

0:11:49.519,0:11:58.880
list and i get a bigger and bigger list and what i want to do here is for each

0:11:55.200,0:12:06.240
size measure speed of the operations right that's my goal

0:12:03.200,0:12:09.120
okay and um so i start with the smallest and with a big list

0:12:07.440,0:12:14.880
and so so maybe let me just start with one operation

0:12:11.839,0:12:18.320
and maybe for that i'll just do this sum right so i can say something like x

0:12:16.800,0:12:24.000
equals sum of my last and now even as i'm doing this i

0:12:21.440,0:12:27.279
realize it's kind of silly that um i'm appending strings so i guess i'll just

0:12:25.600,0:12:32.480
say like um oh 320. i do that and i can actually get

0:12:31.040,0:12:37.040
some sort of number there let me let me just kind of see that this is working

0:12:34.800,0:12:39.360
make sure i'm measuring something real um i am right so i'm able to do that

0:12:38.880,0:12:42.959
some and my assumption is is that after i've

0:12:41.279,0:12:46.160
added more things to that list doing this sum is going to be a little

0:12:44.399,0:12:49.440
bit a bit slower right so i don't actually care what the

0:12:47.680,0:12:55.360
sum is what i want to do is i want to see how long does that take

0:12:52.160,0:12:57.600
so um just you know i guess before i've done examples or i'll say something like

0:12:56.560,0:13:01.680
time.time and that's because i only did from time

0:13:00.079,0:13:05.519
right i just did import time when i do this import style now i can

0:13:03.680,0:13:09.680
just directly call the the time function and then i can do it

0:13:08.720,0:13:13.360
again and maybe let me just print these two

0:13:11.760,0:13:21.519
things so t1 e0 right so so i can see this was

0:13:17.360,0:13:24.800
how many seconds it has been since 1970 before i called this and this is how

0:13:24.000,0:13:28.320
many seconds since that time since 1970 after i

0:13:27.839,0:13:33.360
called it so if i want to i can just subtract

0:13:29.839,0:13:36.959
these and i can figure out how long how long it took to run run this little

0:13:35.360,0:13:40.560
snippet of code okay so what i want to do is i want to

0:13:38.720,0:13:45.279
put these in my data frame and let me i'm just going to consolidate

0:13:43.519,0:13:48.720
into one big cell down here if that's okay with everybody

0:13:46.880,0:13:53.120
um what i'm going to do is i'm going to say that you know

0:13:50.079,0:13:59.680
i have one you know for each row i may have um you know a different

0:13:56.480,0:14:06.399
list size and for each column different operation and then each cell

0:14:03.279,0:14:09.920
is going to be how long it took so that's going to be my

0:14:08.000,0:14:14.079
performance measurement okay so so what i want to do is i have

0:14:12.000,0:14:18.560
this performance measurement here and um well i want to stick it inside of

0:14:16.959,0:14:25.279
this data frame and so well how do i do that i can do it

0:14:21.440,0:14:30.959
like this i can say dataframe.location equals something and when i do dot

0:14:29.279,0:14:36.560
location what do i do i say both the row index

0:14:33.680,0:14:40.800
and the column index okay so let me think a little bit about

0:14:38.320,0:14:45.839
this i guess i want the row basically be the list size right

0:14:43.600,0:14:53.920
so for this i'll just say um i'll say well what is the length of o

0:14:49.040,0:14:57.600
of l and then for the column i guess i want that to be the operation

0:14:55.440,0:15:00.880
i'm doing which is a sum right so i guess i'll say some here and

0:14:59.440,0:15:03.199
then what is this this is my actual measurement

0:15:01.519,0:15:10.560
how long it took so i'll do this i'll put this

0:15:04.720,0:15:14.320
right to here and let's try to do that and that worked just fine so after this

0:15:12.720,0:15:19.040
is all done let me take a look at my data frame

0:15:16.240,0:15:22.560
and i see cool i get all these little measurements

0:15:20.240,0:15:27.440
and and they're all pretty pretty small numbers

0:15:24.000,0:15:31.759
okay um now i'd like to have somewhat bigger numbers

0:15:28.320,0:15:35.759
and so i i can see that well this is how many seconds i have

0:15:33.519,0:15:39.920
um if i had milliseconds i multiply it by a thousand

0:15:37.600,0:15:42.880
uh if i if i was doing microseconds i'd multiply it by a million

0:15:41.519,0:15:46.000
and so i can just see like if i want to kind of have numbers like you know near

0:15:44.800,0:15:52.160
one or so um i could be multiplying these

0:15:49.120,0:16:00.320
by one million whenever this is scientific notation i could do

0:15:54.320,0:16:05.440
i could do this six zeros or just say e6 um and then up here right i need to make

0:16:01.839,0:16:10.880
a note this is in micro seconds okay great

0:16:09.199,0:16:13.759
and then i can actually see well it's taking about one microsecond to get the

0:16:12.560,0:16:17.759
sum so so if you don't mind i am just trying

0:16:15.920,0:16:22.480
to copy and paste this maybe there's a more elegant way but

0:16:19.600,0:16:25.279
um i'm not going to do it for this demo and

0:16:23.040,0:16:32.480
um and what am i going to do here i'm going to do the different operations so

0:16:26.959,0:16:38.639
i have the sum uh let's get the max or the other things i wanted to do i

0:16:37.759,0:16:43.920
wanted to get um i guess i want to get the length

0:16:41.600,0:16:46.160
right and

0:16:47.759,0:16:52.880
blank and then what else did i have i guess i also had um

0:16:53.600,0:16:59.519
i also had extend and and i guess for extend i actually need another

0:16:57.199,0:17:04.160
my mouse is acting weird here i guess for extend i need to have another

0:17:01.680,0:17:07.919
list that i'm actually extending right so i'm going to paste all this one more

0:17:05.760,0:17:10.959
time and maybe what i'll do is i'll just

0:17:09.360,0:17:18.400
create that list here i'll say l2 equals an empty list and then i'll say

0:17:15.360,0:17:23.360
l2 dot extend l all right that's what the extend

0:17:21.039,0:17:26.400
operation is i wonder why i can't click that it's

0:17:25.280,0:17:29.840
very strange um anyway so i'm going to do that and

0:17:28.880,0:17:33.840
run it again and get my data frame uh and this all

0:17:32.480,0:17:37.840
looks pretty good and kind of my intuition is that when i

0:17:35.679,0:17:41.760
have a bigger list that these numbers get slower and what

0:17:40.400,0:17:43.679
you can see is that it's really not right i mean it's kind of steady through

0:17:43.200,0:17:48.000
here and that's because 10 is a really small

0:17:46.320,0:17:51.440
size for a list right everything is super fast

0:17:49.520,0:17:56.080
and so once i have this code working i guess maybe i'll crank this off

0:17:53.200,0:17:59.840
to a thousand and now i can actually kind of see well

0:17:58.240,0:18:04.080
you know i have a small list all these things are fast

0:18:01.520,0:18:09.360
um as i have a bigger list some of these things get slower

0:18:06.080,0:18:14.000
and um and some do not okay so let me think about this i just want

0:18:12.720,0:18:17.280
you to look at the code again for a moment before we move on right

0:18:15.679,0:18:21.679
let's just review what we've done i created an empty data frame but that's

0:18:20.080,0:18:25.200
not rare i usually create data frames like a csv file but we're creating our

0:18:23.600,0:18:29.039
own measurements now and then i use this to insert values at

0:18:27.280,0:18:32.880
specific cells and so i looped to get a thousand

0:18:31.520,0:18:36.960
different rows and then for the four columns well i

0:18:35.120,0:18:40.160
just inserted my four measurements each time

0:18:38.400,0:18:43.840
so i got this data frame at the end and the beauty about pandas is that

0:18:42.480,0:18:48.480
if i have a data frame i can say dot plot dot line

0:18:46.000,0:18:53.440
and what's going to happen well i'm going to get four different lines

0:18:50.559,0:18:56.799
for each of the columns and then for each of those

0:18:54.400,0:19:00.880
things i'm going to get the x values from the index

0:18:58.320,0:19:03.600
and the y values from the actual cells when i do that

0:19:04.160,0:19:11.280
and i kind of get this very noisy plot right so a lot's happening here other

0:19:10.160,0:19:14.320
things that are happening i can see that the fonts really small which i don't

0:19:13.200,0:19:20.039
like so let me just do this i say import

0:19:17.160,0:19:27.679
matplotlib matplotlib rc params

0:19:24.160,0:19:33.280
font dot size equals um let's go with 18

0:19:30.880,0:19:37.760
so you can kind of see what's happening um so it's very noisy

0:19:34.880,0:19:42.320
um maybe let me actually try to simplify this a bit too

0:19:39.280,0:19:45.919
um i can kind of drop out some of those outliers right so i'm going to say ax

0:19:44.080,0:19:50.240
and then say ax that's that excellent and i'll just

0:19:49.039,0:19:58.960
draw from 0 to 15 for this

0:19:54.400,0:20:03.360
and y 12 i guess i meant the y limit and i can actually see something that's

0:20:00.320,0:20:07.120
happening here and so first off i mean this should agree with

0:20:06.080,0:20:11.200
what we said earlier right i said that the

0:20:09.120,0:20:14.559
length was constant time and you can see that hopefully now it

0:20:13.039,0:20:18.080
doesn't matter if um i have a list with zero items or a

0:20:16.080,0:20:20.880
thousand items getting the length is pretty fast

0:20:19.520,0:20:26.640
and then all the other ones are linear time right it's order n

0:20:23.120,0:20:30.080
and i have three roughly straight lines for these three different things but

0:20:28.240,0:20:33.600
what i want you to notice is that they're definitely not equal right max

0:20:32.240,0:20:37.440
is a lot slower than extender sum right so if you were a

0:20:35.840,0:20:40.720
mathematical type it would be almost disappointing to

0:20:39.200,0:20:46.000
walk away feeling like oh they're all order end they're all the same

0:20:42.480,0:20:51.440
no we care about actual wall clock time how many seconds did it take to run

0:20:48.080,0:20:58.240
so i'm gonna go go with that okay um so i'm almost to the end here

0:20:56.080,0:21:01.440
but you know last year somebody asked a good question which i want to answer now

0:20:59.679,0:21:05.200
they asked why is it so noisy why do i have all these

0:21:03.120,0:21:09.440
spikes and there's different reasons for that i'll

0:21:06.559,0:21:15.679
just give you one example to kind of um uh to kind of um walk away with

0:21:13.120,0:21:20.159
and that goes back to what we learned in the first lecture about

0:21:16.720,0:21:26.159
operating systems remember that i might only have one cpu on my computer

0:21:23.760,0:21:31.440
or on my virtual machine and only one process can run on it

0:21:27.919,0:21:34.480
at a time and the operating system decides what process that is right so

0:21:33.440,0:21:38.559
kind of this code i'm running the notebook right now there's one process

0:21:37.039,0:21:41.440
maybe i have other processes running on my virtual machine checking for updates

0:21:40.320,0:21:45.200
or whatever and and so what could happen right i

0:21:43.679,0:21:48.640
feel like all i kind of have all this code here

0:21:46.320,0:21:54.080
that's um running but what could totally happen is the operating system

0:21:50.960,0:22:00.640
would say you know switch to a different process and then

0:21:57.280,0:22:03.679
you know that could run a while right and then and then maybe the os

0:22:02.960,0:22:08.799
says switch back to python code

0:22:06.880,0:22:10.720
and i can't even really tell this happens right this just happens

0:22:09.919,0:22:15.120
automatically from my perspective but what i'm going

0:22:12.799,0:22:18.400
to see is that from this time this time even though i only see this in

0:22:17.120,0:22:21.120
the middle well there's a bunch of other stuff happening

0:22:19.360,0:22:25.440
and it gets really slow and that's one of the reasons when you look down here

0:22:23.039,0:22:28.240
um sometimes i get unlucky when i'm doing my experiment i get this very

0:22:26.720,0:22:32.320
large number uh because something like that happened

0:22:30.640,0:22:35.280
um notice that the luck never goes all the way right there's nothing

0:22:33.679,0:22:37.919
that i get locking in it's somehow magically really fast right

0:22:37.120,0:22:40.480
so you might want to take a lot of measurements and then we don't worry

0:22:39.120,0:22:43.600
about that too much here but you can kind of get a sense of the actual

0:22:41.520,0:22:51.280
pattern and kind of see what is noise and not here

0:22:45.039,0:22:51.280
all right

