0:00:01.199,0:00:06.480
all right in this video i want to talk a lot about inheritance um and in

0:00:05.839,0:00:10.639
particular last time i talked about how in the real

0:00:08.320,0:00:14.240
world we see this notion of multiple inheritance for example

0:00:12.400,0:00:18.400
um i'm a person and you could represent a person with an object

0:00:16.320,0:00:22.320
but you know people often have multiple roles right maybe

0:00:20.160,0:00:25.359
maybe i might be both like a student and an instructor at the same time i might

0:00:24.000,0:00:30.240
be an employee and so we might have these kind of

0:00:27.599,0:00:34.399
complex hierarchies of types where maybe a given person or object or

0:00:32.239,0:00:37.760
anything might kind of fall under multiple

0:00:34.960,0:00:41.040
categories or types and so i want to kind of look at

0:00:38.719,0:00:46.239
how that works and it certainly complicates

0:00:42.559,0:00:50.480
um kind of what happens when we override methods for a given object it might be

0:00:49.039,0:00:53.600
of many different types each of which have a method of the same name so when i

0:00:52.079,0:00:56.559
call a method well which one am i actually

0:00:54.559,0:01:00.640
actually calling and so what i've done here is i have a little bit of a

0:00:58.000,0:01:04.080
code snippet on the left um i have some classes

0:01:02.320,0:01:08.400
and um and then i'm drawing those classes over here on the right so the

0:01:05.680,0:01:12.560
the picture corresponds to the code and then just to kind of keep it simple

0:01:09.920,0:01:15.840
so we can focus on the pure logic of it i don't actually show the methods i just

0:01:14.240,0:01:20.560
say what they are so the a class is you should imagine it to

0:01:18.960,0:01:24.080
have an f2 method and a g method it's the way i draw that

0:01:22.720,0:01:27.680
over here is that a has f2 and g and then remember that all

0:01:26.880,0:01:30.960
classes uh that if they don't kind of explicitly

0:01:29.680,0:01:34.159
inherit from something they inherit from the object type which

0:01:32.960,0:01:37.840
is what you're seeing seeing here the b method b inherits from

0:01:36.960,0:01:42.560
a so b inherits from a b has an f1 and a g

0:01:40.880,0:01:46.399
method which i'm showing in brackets here

0:01:44.720,0:01:50.560
later when you get down to here for example with um

0:01:48.159,0:01:55.119
e1 i'm inheriting from two things i'm inheriting from c and d

0:01:51.920,0:01:58.479
so e1 goes to c and d and there's a preference when you're

0:01:56.880,0:02:03.040
inheriting from two parents you always inhib you always prefer the

0:02:00.240,0:02:06.399
left parent right so e1 prefers c and that's why i put a one here

0:02:04.799,0:02:10.800
and then then d is its second choice which is why i put it a two here

0:02:09.520,0:02:15.120
okay so i've done that i kind of create all these things this is the picture

0:02:13.360,0:02:19.760
and then from that i'm creating a few different objects

0:02:16.480,0:02:23.520
from different types in this picture now the first thing we want to do is add

0:02:22.160,0:02:28.800
some code for class e2 right i can see that e2 is

0:02:27.520,0:02:33.200
over here but i haven't read any code for that yet

0:02:31.120,0:02:37.200
so let's do that so so we have to have a class e2

0:02:34.959,0:02:40.000
and well how will we do that i guess i'll say class

0:02:41.360,0:02:51.200
class e two and well what i see is that

0:02:48.319,0:02:54.319
its favorite parent is d right i have arrow one

0:02:52.000,0:02:58.560
goes to d and then its second favorite parent is c

0:02:55.280,0:03:02.879
so basically the exact opposite of e one right so so its favorite parent is d

0:03:03.120,0:03:13.440
and its second favorite is c okay so it's like that and then

0:03:10.640,0:03:20.800
does it have any methods it has no method so maybe make a note here

0:03:15.440,0:03:27.360
right no methods okay great so i've done that i've added

0:03:25.760,0:03:33.200
the code for e2 okay

0:03:31.280,0:03:35.920
um so there's some missing code right there's something in the in the diagram

0:03:34.640,0:03:40.400
that wasn't in the code uh question two says that there's also

0:03:38.720,0:03:44.560
something missing in the in the class hierarchy right something

0:03:42.640,0:03:48.720
is missing over here that um that i have here right so i

0:03:46.959,0:03:52.319
should update this picture and this is a good opportunity to just

0:03:50.000,0:03:54.879
pause and kind of until you see what is missing and kind of imagine what that

0:03:53.760,0:04:00.080
would look like so pause me hey i'm back i'm assuming

0:03:58.239,0:04:03.760
you unpaused and so if you kind of go down this list

0:04:02.000,0:04:05.840
here and then look at all the classes over here

0:04:04.560,0:04:10.640
what you're going to see is that the m method is what is missing

0:04:08.400,0:04:15.280
or i'm sorry not the m method the m class and m

0:04:11.840,0:04:19.199
is a child of b and e one so so i'm going to just draw

0:04:16.079,0:04:27.280
m m over here and uh does m have any methods

0:04:24.560,0:04:32.960
uh it has no methods so i'm just going to draw it like that

0:04:28.960,0:04:37.280
and then it's favorite parent is b all right so i'm going to put a one here

0:04:35.120,0:04:44.880
that's a favorite parent and the second favorite parent is e1

0:04:43.360,0:04:48.960
and that's the second favorite so that's what i'll draw it right

0:04:46.880,0:04:54.560
okay so i've done that uh i've kind of completed all the code

0:04:51.280,0:04:57.840
and the diagram now and now i have three questions which are

0:04:57.120,0:05:00.960
basically well what should i get called and

0:05:00.479,0:05:07.440
they're all these three are about x and

0:05:04.320,0:05:13.520
where is x x is of type m right so

0:05:10.479,0:05:18.240
so let me just make a note here x is an object of type m and

0:05:16.960,0:05:24.400
and this is going to be tricky right because say for g guess what

0:05:20.560,0:05:34.720
here's a g and here's a g uh for f1 here's an f1 and here's an f1

0:05:30.800,0:05:39.759
for f2 here's an f2 and here's an f2 and and so there's not

0:05:37.360,0:05:44.800
all these complicated rules about which method it's called if i if i

0:05:42.800,0:05:48.240
run a piece of code like this and it turns out that there's actually

0:05:46.800,0:05:51.759
an algorithm for determining this it's called the c3 algorithm

0:05:50.080,0:05:55.199
um there's a paper about it which is kind of actually horribly difficult to

0:05:53.680,0:05:58.639
read and um and so what i want to do here is

0:05:56.720,0:06:02.720
just kind of lay out three rules so you can intuit and kind of figure out

0:06:00.880,0:06:06.000
in the common cases which method will be called and so you

0:06:05.440,0:06:09.600
know this time gets very complicated and for

0:06:08.160,0:06:15.039
this reason some programming languages don't even have multiple inheritance

0:06:12.160,0:06:17.840
uh every type can have at most one parent

0:06:15.919,0:06:21.039
uh python type has this complexity so we're gonna think about it at least on

0:06:19.759,0:06:25.600
in this lecture even though i'm gonna avoid it for most of the class

0:06:23.680,0:06:28.240
okay so the first one and for all of these right i haven't shown you the

0:06:26.639,0:06:32.800
rules yet but what i want you to do is i want you to at least make a prediction

0:06:29.680,0:06:35.680
right what matches your intuition and after you've made the prediction well

0:06:34.479,0:06:40.560
i'll tell you so what do you think what method gets

0:06:38.560,0:06:47.680
called when i say x dot g am i calling am i calling the

0:06:43.680,0:06:56.240
a version of g or the b version of g and the answer is that i may call

0:06:51.919,0:07:00.880
the b version of g and the rule right is that we want to

0:06:58.880,0:07:05.919
prefer refer closer

0:07:06.319,0:07:13.360
all right that's kind of the general rule right and if i'm starting at

0:07:10.240,0:07:16.880
m right i see there's g and there's g and so i prefer that the

0:07:15.919,0:07:20.479
one that's closer and let me just be very clear when i'm

0:07:18.080,0:07:24.319
talking about closer you can only go up in this hierarchy right you can never

0:07:22.800,0:07:27.840
go down right so i can only go up but as i go up

0:07:26.080,0:07:34.240
all what is closer in this case b is closer so that's what i prefer

0:07:30.720,0:07:39.440
okay so the next one i'm calling x dot f1

0:07:35.840,0:07:43.120
and i see that i guess there's two f ones right i mean i could call the b

0:07:40.800,0:07:45.520
version of f1 or i could call the e version

0:07:44.160,0:07:48.160
so what do you think which one is it going to call

0:07:48.479,0:07:58.639
and the answer is again we prefer the b version

0:07:55.759,0:08:03.039
why well let me just write this down first

0:08:00.080,0:08:07.919
why because b is our favorite parent and remember left parents

0:08:04.400,0:08:14.080
uh are preferred over right parents and and so we're gonna go that router and go

0:08:09.440,0:08:19.520
b okay so i'm gonna say prefer prefer left as i'm kind of going up this

0:08:17.759,0:08:22.720
hierarchy and and by left i'm talking about you

0:08:21.840,0:08:29.199
know uh here right b is before e1

0:08:26.479,0:08:33.599
and that last now you can imagine how these rules

0:08:32.240,0:08:38.560
could um kind of contradict each other right i

0:08:36.240,0:08:44.800
mean what if i have something that's really far away along the left

0:08:43.039,0:08:48.000
right it's time really far away along the left or i have something that's

0:08:46.640,0:08:54.399
really close to the right and the answer is

0:08:51.519,0:08:58.640
that i'm going in this direction i'm going from weaker

0:08:55.519,0:09:03.760
to stronger rules right these are stronger rules

0:09:02.399,0:09:08.240
and so what that means is that i'll prefer going left

0:09:06.640,0:09:12.399
i'll prefer going left even if it's really far away to me that's better than

0:09:09.839,0:09:16.720
drawing right okay let me just try to be racist to

0:09:14.720,0:09:23.519
clean it up a little bit okay the last one is

0:09:19.760,0:09:28.160
what method will x dot f2 invoke and um

0:09:26.720,0:09:31.360
and kind of looking at the rules well well first where are the two f2s i guess

0:09:30.000,0:09:35.519
i have one here here's an f2 right so i could have the a

0:09:34.000,0:09:40.320
version and here's an f2 so i could have the d

0:09:39.120,0:09:44.000
version right so i really have the a version or the d version

0:09:42.080,0:09:47.040
and looking at the whole rules we have so far

0:09:45.360,0:09:51.760
you'd probably say well i prefer a because it's to the left

0:09:49.200,0:09:55.200
but it turns out there's one more rule and that is

0:09:52.800,0:10:06.800
prefer descendants

0:10:04.240,0:10:10.560
right so in this case right when i'm kind of considering these two

0:10:09.440,0:10:14.000
i mean i could just think about which one goes left and which one goes right

0:10:12.800,0:10:20.560
but these two actually have a relationship between them

0:10:16.800,0:10:25.240
right d is a descendant of a and by a descendant i mean it could be a

0:10:22.880,0:10:29.040
child or a grandchild or a great-great-grandchild

0:10:26.880,0:10:31.920
and this is the strongest rule of all preferred ascendance

0:10:30.399,0:10:37.279
so even though preferring left might take us to a this is a stronger rule

0:10:34.880,0:10:41.680
and this is going to take me this is going to take me to

0:10:39.040,0:10:44.480
d right so those are the three rules and that kind of captures that algorithm

0:10:43.360,0:10:46.959
that i was talking about in that very complicated paper

0:10:45.680,0:10:53.440
so just remember those three rules and kind of apply them in in order

0:10:50.240,0:10:57.519
okay let's um moving on let's kind of mix in special methods

0:10:55.519,0:11:02.800
with inheritance so if i call print x what is that going to

0:11:01.360,0:11:06.480
invoke right so again axis is of type m down

0:11:05.279,0:11:11.440
here and um and so remember when i print

0:11:10.000,0:11:15.920
things i'm calling the underscore underscore str method and so

0:11:14.480,0:11:20.000
i have this up here and i have this down here and so what

0:11:18.399,0:11:26.480
will i do well i prefer descendants

0:11:24.720,0:11:31.440
right this one is a descendant of this one that was my strongest

0:11:28.079,0:11:36.160
rule and so what was going to do i was trying to end up using

0:11:33.279,0:11:41.360
the d version okay so we've done a lot of acts which

0:11:40.640,0:11:46.160
was a type m now in this next question where i look

0:11:44.640,0:11:51.040
at w and w is of type c so i'll just make a

0:11:49.680,0:11:56.480
little note up here right so i'm looking at w now

0:11:53.600,0:12:02.800
w is of type c i wonder i wonder if you can really tell that let me

0:11:59.440,0:12:07.760
there there's w and i'm printing w so what what does that one do well in

0:12:05.120,0:12:12.000
that case you know i can only look up right i can

0:12:10.320,0:12:15.200
look at my you know i can look at myself i can look at my

0:12:13.519,0:12:19.120
parents i can look at my grandparents my great great grandparents

0:12:17.040,0:12:21.680
this one is is really kind of a cousin right

0:12:20.079,0:12:25.360
i can't get from here to here right i can't go back

0:12:23.120,0:12:29.279
backwards on that arrow so really my only choice is

0:12:26.720,0:12:32.800
up here right so that the answer is the object version

0:12:30.880,0:12:38.079
i can't reach d right so i'm just going to say here

0:12:34.880,0:12:40.639
i'm going to take the stir method from object

0:12:41.120,0:12:52.720
okay another variable which is y y is of type e1 so here's y

0:12:51.440,0:12:57.360
and i guess for the next one too i may have z which is z is of type e2 so i'm

0:12:55.120,0:13:03.200
just going to make a note of that now for the next question so what method

0:12:59.600,0:13:06.560
will y dot h invoke okay so let me look at this so here i

0:13:04.800,0:13:11.760
have y and well

0:13:09.760,0:13:18.160
i could go here right there's the c dot h or i could have this one

0:13:14.800,0:13:23.440
and it looks like c is my preferred parent

0:13:19.600,0:13:26.880
because because over here it comes first right c comes before d

0:13:24.800,0:13:29.440
so c is my left parent that's my preferred parent

0:13:28.000,0:13:35.440
so that's where i prefer to take my methods from and so the answer is well

0:13:32.000,0:13:40.320
i'm going to take it from c okay what about z right so z is of type

0:13:39.040,0:13:48.000
e2 and i have the same two parents but now

0:13:44.880,0:13:50.160
now i can see that d is my preferred parent right you see how i have a 1

0:13:49.440,0:13:57.600
there right because if i look over here at e2

0:13:54.480,0:14:01.519
d comes before c right so d is my left paren in this case so in this

0:14:00.160,0:14:06.959
case i'm going to call the d version right so even though

0:14:03.519,0:14:10.240
uh y and z are two different types and those two

0:14:08.240,0:14:14.000
different types have the same parents sometimes i'm gonna kind of inherit from

0:14:12.399,0:14:18.639
one and one sometimes i may hear it from the other

0:14:16.399,0:14:22.160
now there's a lot of complexity here and i've been talking about the rules

0:14:20.240,0:14:24.480
and i think that hopefully this gives you a new appreciation for something i

0:14:23.680,0:14:28.160
taught last time which is method resolution

0:14:26.240,0:14:32.399
order right and um in method resolution order just

0:14:30.880,0:14:38.240
to remind you is a special attribute for classes

0:14:36.480,0:14:41.600
okay so just like we've seen kind of special methods uh

0:14:39.680,0:14:44.800
uh as well and special attributes are the same except there's no parentheses

0:14:42.959,0:14:48.560
at the end i'm not calling them and so it's for classes and what that

0:14:46.959,0:14:53.279
means is i can put you know a class name and then

0:14:50.880,0:14:56.720
say dot mro so i can do that i cannot do this i

0:14:55.199,0:15:01.199
cannot say w mro because w it's not a class it's an

0:15:00.160,0:15:04.480
object right w is not a class it's an object so i can't

0:15:03.519,0:15:08.480
do this that's invalid that will crash this is

0:15:07.440,0:15:12.240
correct and what this will do is really save me

0:15:10.320,0:15:15.680
a lot of time right because it'll tell me that you know it'll tell

0:15:14.800,0:15:19.360
me something like our first choice is to pick methods from

0:15:17.360,0:15:23.279
here our second choice is to pick methods from a

0:15:20.480,0:15:25.120
our third choice is to pick methods from b

0:15:23.680,0:15:30.079
and they'll tell me that by giving me a tuple with c

0:15:26.800,0:15:34.320
a object in that order right so we have kind of all these complicated rules

0:15:32.560,0:15:40.560
the method resolution orders may tell us exactly how those rules play out and

0:15:36.480,0:15:43.839
what the final answer is okay i want to talk a little bit about

0:15:41.839,0:15:46.880
types and also introduce this new method which is

0:15:46.399,0:15:52.800
is instance okay and what i'm calling is

0:15:50.639,0:15:57.839
instance i have a bunch of examples here but what will happen is that i'll take

0:15:54.320,0:16:00.720
like a an object and a class

0:16:01.440,0:16:08.000
and those are going to be the two things right

0:16:05.120,0:16:11.440
and basically what i'm going to ask what does

0:16:08.480,0:16:16.240
instance do it asks me is object is it of type class

0:16:13.360,0:16:19.680
or some ancestor of class right ancestor could be

0:16:16.720,0:16:22.079
parent grandparent whatever and his instance is going to be a little more

0:16:20.839,0:16:26.240
flexible than all of these calls with type that

0:16:24.880,0:16:28.480
are kind of checking what the type of an object is

0:16:27.040,0:16:31.600
so let's go through some of these so what is the type of y and is it equal to

0:16:30.480,0:16:36.240
m so when i'm doing this i'm just going to

0:16:32.880,0:16:42.639
evaluate this the type of y is e1 so i'm going to cross this off

0:16:39.839,0:16:49.600
this is e1 and um and maybe i'll just make a note

0:16:48.399,0:16:52.800
here that is and i guess instead of circling it i'm just going to say that's

0:16:50.880,0:16:58.800
false oh that's a little bit of a messy f that

0:16:55.839,0:17:04.880
is false right because e1 is not equal to

0:16:59.120,0:17:12.240
m okay the next one the type of w is c right so

0:17:08.000,0:17:16.400
is c equal to a no right because it's just it's

0:17:15.760,0:17:21.439
different right it's a different class that's false too

0:17:19.039,0:17:25.360
but let me skip ahead a little bit and see what happens instead of asking

0:17:23.360,0:17:31.919
if the type of w is a what if i say is instance w

0:17:28.720,0:17:36.160
a in that case i figure out what type w is and w is of type c

0:17:35.039,0:17:42.400
and then i kind of check up the hierarchy and i see

0:17:38.559,0:17:46.240
do i have some ancestor that is a and guess what i do right even though w

0:17:44.559,0:17:51.520
isn't an a it's an instance of a because it's a c

0:17:49.360,0:17:57.919
and a c is a kind of a right so so this one down here

0:17:54.880,0:18:04.799
is instance w a that's actually true

0:18:01.840,0:18:09.280
that's a true statement okay let's just do a couple more here

0:18:06.160,0:18:14.400
so type of w equal to c that's true right w is a c so that's

0:18:12.840,0:18:19.120
true um is type of y equal to e1

0:18:20.480,0:18:34.720
yeah y is an e1 so that's true okay is instance z a

0:18:30.559,0:18:38.799
so z is an e2 right i have it here and can i get to a from here yeah

0:18:37.760,0:18:42.080
actually a couple ways i can get to a right it's

0:18:40.720,0:18:46.240
not my grandparent twice over and so that's a true statement

0:18:47.520,0:19:00.160
okay is y is y an instance of m so y is of type e1

0:18:56.799,0:19:05.679
so i start here and i can only go up right i can't i can't kind of go down

0:19:02.320,0:19:08.960
here so this is false right i can kind of only go off the

0:19:06.960,0:19:13.600
hierarchy what about this is b an instance of a

0:19:12.400,0:19:16.400
so that's a little bit tricky right because i guess both b and a are classes

0:19:15.679,0:19:19.760
right i have b in here um but the rule is i can only

0:19:19.360,0:19:24.400
have an object and a class for this instance

0:19:21.600,0:19:27.360
method there are there are other um uh functions that i don't really find a use

0:19:26.000,0:19:30.960
for very often that could kind of check if one class

0:19:28.720,0:19:34.320
um is a descendant of another but i'm not going to talk about them in this

0:19:32.000,0:19:37.520
class so this would actually just um you know if i want run this this is

0:19:35.760,0:19:41.200
going to crash it's not going to return true or false

0:19:39.120,0:19:48.240
and i fail okay is w an instance of c

0:19:45.440,0:19:52.720
so i have w here yeah well directly right

0:19:48.799,0:19:56.559
i mean if the type of w equals c if the type of w equals c then this is

0:19:55.120,0:19:59.039
definitely also true right i mean this is kind of

0:19:57.280,0:20:02.880
uh kind of accepting more kinds of relationships

0:20:00.480,0:20:07.520
right so that's absolutely true the last one is

0:20:03.600,0:20:09.679
y an instance of e1 so is y in instance of v1

0:20:08.320,0:20:14.880
you know that's the same thing that's also also definitely true

0:20:13.360,0:20:20.480
great so so we kind of learned about how to think about the hierarchy

0:20:16.799,0:20:22.480
um in terms of of code we learned the rules for which method they're going to

0:20:22.159,0:20:26.720
get called we learned again about method

0:20:24.960,0:20:29.679
resolution order how it helps us answer these questions

0:20:27.840,0:20:34.799
and then we learn some ways to explore both the type

0:20:31.200,0:20:38.320
of an object and kind of where the type of an object might fit into

0:20:36.480,0:20:41.520
some hierarchy and we can write code to check that

