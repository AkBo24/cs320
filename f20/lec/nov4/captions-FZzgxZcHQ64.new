0:00:00.880,0:00:07.040
so in that last video we were able to construct this big data frame

0:00:04.080,0:00:10.000
by scraping the website um in this one i want to look at a problem called

0:00:08.800,0:00:13.280
geocoding and geocoding is the problem of

0:00:11.759,0:00:17.520
converting an address like this to actual latitude and longitude on a map

0:00:15.839,0:00:19.760
and i have to be able to do that if i want to put this all in the geodata

0:00:18.960,0:00:24.320
frame so i'm going to put this all in uh in a

0:00:22.080,0:00:27.599
simple df like this and then what i want to do is i want to

0:00:26.480,0:00:33.120
be able to convert each of these one by one and uh and so

0:00:31.039,0:00:36.320
i mean imagine looping over this maybe i'll do it one cell at a time i'll say

0:00:34.880,0:00:42.800
something for i and range length of df

0:00:40.480,0:00:46.399
and and maybe for now i'll actually just um

0:00:43.760,0:00:50.800
do the first few indexes maybe i'll just say like um

0:00:48.640,0:00:56.000
uh this i'm only doing that first row let me just print i

0:00:53.360,0:01:00.640
i'm going to grab out the address like so

0:00:57.120,0:01:05.680
the address is is what i guess it would be

0:01:01.680,0:01:12.560
my data frame address dot i location of i and let me print

0:01:08.640,0:01:16.960
that out like so and

0:01:15.840,0:01:20.080
then i want to have some sort of function where i can say um you know a

0:01:19.040,0:01:27.439
chord coordinates equals um you know

0:01:23.280,0:01:30.560
get coordinates of that address and then i want to be able to say

0:01:28.880,0:01:38.640
something like um a data frame of location

0:01:34.880,0:01:42.000
and um you know what i actually kind of overcomplicated this right this

0:01:40.159,0:01:48.240
is also my index i didn't have to do an eye location here i could have just said

0:01:44.320,0:01:52.479
that i wanted to go to row i and then column that right so i

0:01:51.520,0:01:57.040
could have done this like so that'd be a little bit more

0:01:54.079,0:02:00.479
elegant and then down here i want to say the same thing but i want to have this

0:01:58.240,0:02:06.479
geometry column right i want to say a geometry equals

0:02:03.920,0:02:09.679
those coordinates all right so this is going to be the interesting thing how

0:02:07.600,0:02:15.360
can i have a function that does this conversion for me right

0:02:12.720,0:02:19.599
how can i create something that takes in those coordinates and then returns well

0:02:17.920,0:02:24.080
what do i want to return i actually want to return

0:02:20.840,0:02:30.480
uh a shapely point so i'm gonna say shapely

0:02:25.599,0:02:33.920
i say actually from shapely.geometry import point that's what i want to

0:02:32.239,0:02:37.440
return here okay so the way i may have to do this is

0:02:36.239,0:02:43.840
with some help of a public api on the internet and i can use

0:02:40.959,0:02:50.400
google's api uh google has a very nice geocoding api and i'm going to head over

0:02:47.440,0:02:53.280
to their documentation for how i can use that api

0:02:53.519,0:03:01.040
basically what i do is i'll put in a url like this and you can see inside of

0:03:00.000,0:03:05.519
the url that it actually includes an address and

0:03:03.840,0:03:10.159
so if i run that thing they're going to actually give me back

0:03:07.920,0:03:14.000
the coordinates of that address which is what i would like and so so

0:03:12.800,0:03:20.000
what i'm going to do is i'll just try to grab that url

0:03:16.640,0:03:23.360
equals that thing uh pretty long piece and then there's a couple things

0:03:21.920,0:03:27.200
that i have to replace in here i mean i actually have the address in this part

0:03:26.000,0:03:31.120
and then there's this other thing called the api key

0:03:29.120,0:03:34.000
which i'm gonna have to have as well um and i'm going to be talking about what

0:03:32.159,0:03:39.200
that means so i can put format here

0:03:37.040,0:03:42.480
and and i have to pass in well i have to get an address

0:03:40.959,0:03:46.159
which is actually coming straight from here and then i have to get a key here

0:03:45.760,0:03:49.920
which maybe i'll just say like this key is to

0:03:48.720,0:03:56.080
do and i'll just put that key here

0:03:53.120,0:04:00.959
okay so that's the idea and let me just see how here i'm going to call it i'm

0:03:57.760,0:04:05.840
going to say get chords of this is one of those addresses all right

0:04:04.239,0:04:10.319
so i'm going to get the coordinates for that thing

0:04:07.519,0:04:15.280
and um maybe i'm just going to put a space there for now

0:04:12.159,0:04:19.359
i'll solve one problem at a time and uh and then up here what i'm going to do is

0:04:16.479,0:04:26.800
i'm going to say uh r equals request.get

0:04:24.479,0:04:31.199
that url and then i'm going to do this raise for

0:04:27.840,0:04:34.880
status and then down here i'd actually maybe just print

0:04:33.360,0:04:40.400
the json for now or json so the way this api works is that i

0:04:38.400,0:04:43.520
can send requests to this url and they're going to give me back json

0:04:41.919,0:04:48.560
pages that i can parse out to actually get information out of it

0:04:45.280,0:04:51.919
so when i run that and uh it's complaining it's saying the provided api

0:04:50.320,0:04:55.120
key is invalid and the reason why is that they actually

0:04:53.600,0:04:58.320
make a business out of this they let you do a certain number

0:04:56.000,0:05:02.800
of requests free per day and then after that they start charging you

0:05:00.160,0:05:06.160
and so i have to basically put in what is essentially a password here

0:05:04.639,0:05:10.400
so they can keep track of well who was doing all this work

0:05:08.320,0:05:13.280
and uh and you want to keep that secret and uh

0:05:11.759,0:05:15.360
well i'm gonna create a new one right now and i'm gonna use it for this demo

0:05:14.560,0:05:18.560
and of course before i release the video um i'm gonna

0:05:17.840,0:05:22.000
make that uh delete it so you can you know just

0:05:20.800,0:05:24.560
steal my api key you wanna kind of be careful those don't

0:05:23.199,0:05:27.280
put them on cat home or something like that

0:05:25.199,0:05:31.360
because actually very good odds that somebody will find it

0:05:28.720,0:05:34.800
and uh and steal it so here i am on the google cloud console

0:05:33.360,0:05:38.240
where you were at the beginning of the semester like you went through lab one

0:05:36.800,0:05:41.680
and you created your virtual machine and i'm gonna go down

0:05:40.639,0:05:47.520
here and i'm gonna go to apis and services

0:05:44.400,0:05:51.600
and i wanna look at the library of apis and i'm gonna search for geocoding

0:05:49.280,0:05:55.520
geocoding is when we convert the address to the latitude and longitude and i see

0:05:53.759,0:05:59.919
that they have a geocoding api right here

0:05:56.880,0:06:04.160
you can see that for me mine is already enabled yours probably isn't and you

0:06:02.720,0:06:06.560
probably have to enable it before you can get started

0:06:05.520,0:06:11.919
and you can see how they have some pricing details here right

0:06:08.880,0:06:15.280
um if i want to do a lot of these and eventually i have to start paying

0:06:14.560,0:06:18.400
right but this is going to probably fit in that

0:06:16.960,0:06:21.039
credit you you get to start so don't worry about it too

0:06:19.600,0:06:25.440
much unless you're converting a lot of addresses

0:06:22.240,0:06:30.160
i'm going to go to manage here to manage my uh my api and

0:06:29.039,0:06:32.720
the thing i have to look at is credentials credentials and let me

0:06:31.759,0:06:38.800
create that key so i head over to credentials and uh

0:06:35.919,0:06:41.680
and it says there are no api keys to display

0:06:39.360,0:06:44.479
right i want to uh i'll create one so i just try to keep clicking they make you

0:06:43.039,0:06:49.759
jump through all these steps credentials and the apis and services

0:06:47.919,0:06:54.560
and here i am right so here i can actually start creating my um

0:06:51.759,0:06:58.080
my api keys and i see there are some here

0:06:54.960,0:07:01.440
but they're for other google apis none of them are related to

0:07:00.000,0:07:05.360
geocoding which is why i haven't seen it yet let me say create

0:07:03.199,0:07:09.599
credentials like this and i want to create an api

0:07:06.400,0:07:14.319
key and it's creating it and this little thing here it gave me is a

0:07:11.440,0:07:17.840
password so i'm going to copy that thing and maybe even before i go farther i'm

0:07:16.160,0:07:21.360
just going to put that over here right let me save that

0:07:19.520,0:07:26.639
password and then i say restrict key um

0:07:24.639,0:07:30.800
what i mean by restricting the key is that i only want to allow

0:07:27.840,0:07:33.840
this to be used with certain apis right i only want to be used with geocoding

0:07:32.639,0:07:37.360
and that's going to kind of limit the damage if um somehow this leaks out if

0:07:36.160,0:07:41.199
somebody gets it um maybe i don't want them posting

0:07:39.120,0:07:44.720
youtube's on youtube videos on my behalf right i mean that's all their

0:07:43.360,0:07:48.400
google services i mean that can be very embarrassing right

0:07:46.160,0:07:51.360
so so i want to restrict it so that if somebody steals this from me

0:07:49.759,0:07:56.560
the only thing they can really do is use up my credit it's only restricted to

0:07:53.680,0:08:01.759
just be the geocoding api and then i to save this okay so i have

0:07:59.599,0:08:07.599
that api key and it's over here and so now when i do this i can see that

0:08:04.879,0:08:10.240
instead of getting um kind of a useless response back i'm actually getting these

0:08:09.039,0:08:17.120
nice results right and so this is wonderful

0:08:13.599,0:08:20.560
okay so what i want to do now is um be a little bit careful because you

0:08:18.319,0:08:26.240
could imagine that i might try to uh i i might try to um

0:08:23.919,0:08:28.400
check this code in a public github repo or something like that

0:08:27.039,0:08:33.360
and so what i've done here is actually very bad practice right

0:08:30.720,0:08:35.519
never put your api keys directly in your code

0:08:34.399,0:08:38.080
what will be better is if i have something like this if i have something

0:08:36.640,0:08:43.519
like open up like a secret txt

0:08:41.120,0:08:47.839
as f and then i could read it and i could say like f dot read

0:08:45.600,0:08:52.320
and you know maybe there's like a new line of 10 so i want to get rid of that

0:08:49.600,0:08:54.720
so that'll be a better thing to do and um

0:08:52.959,0:08:58.080
and to make this work well what do i need to do i guess i should say

0:08:58.399,0:09:07.680
file open let me just create like a secret

0:09:02.399,0:09:14.080
text file let me call this secret dot text and paste that here

0:09:11.760,0:09:17.920
and i will never check secret dot text into my get repo

0:09:15.920,0:09:20.640
but now if i delete this it's okay if i check my code right there's nothing

0:09:19.360,0:09:23.920
secret in my code and it all works the same so

0:09:22.640,0:09:29.680
good for me okay what is going on here right i have

0:09:27.600,0:09:34.800
a big complicated uh dictionary that i got from the json

0:09:33.120,0:09:38.320
and um and what i want to do is just start digging in i can see that there's

0:09:36.080,0:09:44.320
a results key so let's start there what do i have inside of the results

0:09:41.200,0:09:46.640
i i have a big list why a big list well some of the things i could search for

0:09:45.519,0:09:51.040
like an address you could totally imagine that i might get

0:09:48.320,0:09:54.000
multiple locations right so uh that's why it's showing me the multiple

0:09:52.560,0:09:57.519
locations that might correspond to that address i'm just going to take the the

0:09:55.600,0:10:00.880
first one there um this is kind of a little bit messier

0:10:00.000,0:10:04.880
to look at isn't it um maybe what will help me is

0:10:03.600,0:10:09.279
if i look into all of the keys of this

0:10:06.480,0:10:12.720
dictionary so if i say like dot keys i can say there's all these different

0:10:10.480,0:10:18.480
places parts of it and i can see ah there's geometry geometry sounds useful

0:10:15.440,0:10:22.320
so geometry you can see i'm kind of just digging into this farther and farther

0:10:20.880,0:10:27.360
oh geometry has something called locations i'm going to look at location

0:10:24.320,0:10:31.920
within the geometry and now this is actually pretty good

0:10:29.040,0:10:37.519
right i have this location dictionary like so

0:10:34.160,0:10:43.040
and what's nice about that is i can use it to create one of these shapely

0:10:39.519,0:10:48.560
shapes i can say here that i would like to have on

0:10:45.600,0:10:52.079
when i'm doing this i have to pass in remember i

0:10:49.120,0:10:55.920
have an x and a y and so let me think about that

0:10:52.880,0:10:59.200
um y is a latitude i always think you know lat

0:10:57.920,0:11:03.600
is ladder and so i should have a longitude first

0:11:01.040,0:11:10.880
that's x i'm going to say location and i'm going to say longitude

0:11:07.279,0:11:14.000
that's my x and then location latitude and i'm going to return that

0:11:12.839,0:11:19.839
thing just like so and see how that works and

0:11:17.920,0:11:23.279
very cool it's not on a map so it's hard to see what's going on but that is a

0:11:21.760,0:11:25.920
coordinate right i actually got some sort of

0:11:24.079,0:11:29.680
a point back one thing i just want to check is if i look back up here

0:11:28.240,0:11:33.600
you see that some of the text was kind of running together

0:11:31.279,0:11:37.279
um i just want to see how bad that's going to be for me if i

0:11:35.519,0:11:39.600
i get rid of that it's still going to work it looks like it still works so i'm

0:11:38.560,0:11:42.880
not going to worry about it google is smart enough to figure out what i meant

0:11:42.399,0:11:47.760
there wonderful okay so now what i'd like to

0:11:46.399,0:11:53.600
do is i can use this or everything

0:11:51.519,0:11:58.240
right i can i can kind of do all these different addresses

0:11:55.600,0:12:01.839
and uh and so what i'll do here is i have my get cords and

0:11:59.760,0:12:07.360
actually this code is actually pretty complete isn't it

0:12:03.040,0:12:12.320
we run that thing and uh why why is it unhappy um it must be a string

0:12:10.240,0:12:18.000
or a float not a point uh why is it doing that to me um

0:12:16.240,0:12:24.000
i think because i have to say what that d type is for that new

0:12:20.079,0:12:28.800
column so let me actually me actually peek at this thing you know

0:12:26.800,0:12:33.279
what i'm going to strap all this uh or actually well what's the quickest

0:12:31.920,0:12:37.440
and easiest way to do it what if i say something like this if i

0:12:34.639,0:12:42.240
say something like geometry equals none and then i peek at that

0:12:42.560,0:12:47.360
let me let me try running this again there it goes

0:12:45.839,0:12:52.399
i think i just had to put in something like none which is

0:12:49.200,0:12:57.920
um kind of makes geopandas think of or pandas in general think of uh um

0:12:55.839,0:13:01.200
objects right it's not it's it's clear that none is not a float right so then i

0:12:59.440,0:13:05.360
can actually put other things in here so i run that and then if i look at my

0:13:02.880,0:13:09.680
data frame i see that i actually am able to shove that

0:13:06.000,0:13:18.560
point inside of there and so let me uh clean all this up a bit let me

0:13:13.120,0:13:22.480
let me do this uh i can put this down here and

0:13:20.480,0:13:26.000
uh and and really i can run this on all of my

0:13:23.760,0:13:28.800
all of my cells now maybe what i'd like to do is i guess i'm putting the address

0:13:27.440,0:13:32.320
here so i can see as it's making progress

0:13:30.160,0:13:36.639
and i'm gonna do it for the whole thing right so length of data frame

0:13:34.800,0:13:40.480
let's see how far we get let's try to do all of these different

0:13:38.240,0:13:42.800
different rows and while that's running i just want to talk a little bit i'm not

0:13:41.519,0:13:46.160
going to do it in this example because i already had something similar

0:13:44.639,0:13:50.320
but do you remember way back when i had this fire page thing

0:13:48.639,0:13:54.240
the main point was that i was saving my data

0:13:52.000,0:13:57.680
inside of a local file so that i wouldn't have to re-grab it

0:13:55.600,0:14:02.959
at the same time that's probably even more important

0:13:59.920,0:14:06.480
for well where am i sorry that's even more important for something

0:14:04.480,0:14:10.399
like this because if i make too many of these requests to google i

0:14:08.160,0:14:13.519
actually have to start paying for it right okay so let's just look here again

0:14:12.240,0:14:16.639
right i'm trying to fill in one cell based on another one right so i

0:14:14.959,0:14:19.839
have my address cell i'm using it to create a geometry cell

0:14:18.320,0:14:25.839
i do that by this git coordinates function i have uh get coordinates

0:14:22.560,0:14:28.480
is using google's api right i send an address

0:14:26.399,0:14:32.959
as part of this url they give me back some json that tells me

0:14:31.360,0:14:38.160
the location in terms of latitude and longitude i have to

0:14:34.880,0:14:42.000
give them my password my secret key when i do that and then when i'm all

0:14:40.000,0:14:45.600
done i can convert what they gave me to a point okay so i think we are in

0:14:44.800,0:14:50.959
good shape and so if i look at this thing now i

0:14:47.920,0:14:54.639
actually have points for all of these now the type of this is just a regular

0:14:53.760,0:14:58.000
plain old data frame which is not what i want i

0:14:57.360,0:15:02.240
want to have a geo pandas data frame so i'm going to

0:15:00.160,0:15:05.360
import geopandas and i'm going to say

0:15:09.160,0:15:13.760
geopandas.geodataframe and i can create that from my regular

0:15:12.000,0:15:17.040
data frame like so and then the other thing i can

0:15:16.320,0:15:21.760
pass in is well what column is going to be my

0:15:20.000,0:15:25.199
geometry column so you can see i can pass that in tell

0:15:23.839,0:15:27.360
them to use that because if array it will

0:15:25.519,0:15:32.079
do that so i should say i want my geometry column

0:15:29.199,0:15:34.160
to be well than what i passed on all right so this is going to be a geodata

0:15:33.440,0:15:39.839
frame i say gdf just like that

0:15:37.360,0:15:44.160
and uh maybe i'll just like shorten that up a little bit

0:15:41.040,0:15:48.800
i can see more things and uh and then the great thing about that

0:15:45.680,0:15:53.040
is i can just say geodataframe.plot right and i am right now hopefully

0:15:50.720,0:15:56.399
fingers crossed see all of these different locations

0:15:54.079,0:15:59.040
that happened uh in madison i can see that there's probably some

0:15:57.199,0:16:03.199
uh messiness to the data right that's probably not right

0:16:00.560,0:16:05.360
uh uh that you know i have some way out here

0:16:04.079,0:16:09.839
um but i'll pick up in the next video and actually starting to create a map

0:16:06.639,0:16:09.839
from this

