0:00:02.080,0:00:06.960
so in this lecture i'm going to dive into

0:00:04.240,0:00:10.719
numpy which is going to be the basis for a lot of the linear algebra

0:00:08.240,0:00:14.960
algebra we're going to be doing um and so there's a reading for this

0:00:12.080,0:00:18.960
uh which is part of the scipy lecture notes um

0:00:16.160,0:00:22.080
scipy and compasses matplotlib numpy and some other things

0:00:20.480,0:00:25.840
and so i want you to read this section the numpy

0:00:23.600,0:00:29.199
array object so uh numpy arrays are really very general you can imagine

0:00:27.359,0:00:32.880
using them instead of lists um you could also imagine using them

0:00:30.800,0:00:37.120
instead of things like um panda series or pandas data frames uh

0:00:35.680,0:00:40.000
they're very flexible in terms of the dimensions right so

0:00:38.800,0:00:43.440
you know a data frame is kind of like this two-dimensional thing with rows and

0:00:41.520,0:00:47.200
columns it's very easy to make an empire that's

0:00:45.600,0:00:50.800
three-dimensional four-dimensional you name it

0:00:48.559,0:00:52.800
so this is a pretty good reading um it's it's based uh

0:00:51.920,0:00:56.640
you know there's a lot of different authors that contribute to it so

0:00:55.440,0:00:59.280
i'm not trying to name anyone in particular but i think you'll read

0:00:58.160,0:01:02.079
through this and understand what's going on

0:00:59.840,0:01:05.600
i just want to give some examples some brief examples of notebook

0:01:03.840,0:01:09.360
to go over some of the trickier things that you're going to see

0:01:07.280,0:01:12.400
that might catch you off guard and that kind of where your intuition based on

0:01:11.520,0:01:17.759
python lists might actually kind of come back to bite

0:01:14.080,0:01:23.840
you so i'm going to say import numpy as np is kind of a traditional import

0:01:21.920,0:01:27.520
and then there are these array objects and i can create

0:01:25.200,0:01:32.479
them in a variety of different ways but maybe the easiest one

0:01:28.960,0:01:36.640
is just from is just from a python left so i can do that and now i

0:01:34.960,0:01:41.200
see i get this nice array object with these three things

0:01:38.799,0:01:44.320
there are also all of these different functions for automatically creating

0:01:42.880,0:01:48.079
rays with either say ones or zeros or maybe

0:01:46.479,0:01:52.840
even random data as i'm going to show some of those here

0:01:49.360,0:01:55.840
i can say numpy dot zeros

0:01:55.920,0:02:00.960
like that and then i can see how many zeros i want maybe i want like something

0:01:59.200,0:02:04.960
like eight zeros and i get it and you can see that it's

0:02:02.880,0:02:08.879
showing those up as uh floating points for me

0:02:06.320,0:02:13.440
there's a period after each one um i could also get numpy.ones

0:02:10.800,0:02:18.239
eventually we'll see use cases for why uh you might often want to do this

0:02:16.239,0:02:21.680
um another thing we can do is very similar to

0:02:19.360,0:02:25.760
range that we have for python so with range

0:02:23.040,0:02:28.720
i could get this and really it's hard to see what's going on there but that's all

0:02:26.879,0:02:33.840
the numbers between um zero and uh you know just short of

0:02:32.160,0:02:40.640
ten so zero through nine inclusive um with numpy

0:02:37.040,0:02:45.680
i can say numpy dot a range and you can see it actually materializes

0:02:42.800,0:02:48.319
it right away for me now it turns out there's some other

0:02:46.800,0:02:53.200
things i can do here as well so when i say

0:02:49.680,0:02:55.760
a range i actually have the option of passing in three things which could be a

0:02:54.800,0:03:01.599
start an end and then a step and so let me

0:02:58.800,0:03:04.959
just copy that here if i wanted to i could say i want to go

0:03:03.840,0:03:10.640
from zero until one and if i

0:03:08.720,0:03:14.319
if i leave this off i just hit zero because the one is exclusive

0:03:13.040,0:03:19.680
but if i wanted to i could say something like 0.1

0:03:16.560,0:03:24.799
and now you can see i get you know 0 0.1 0.2 and so on this is actually not

0:03:22.400,0:03:28.319
something that i'm allowed to do with the regular range in python right

0:03:27.120,0:03:33.519
so if i do that it's like hey can't do that it has to be

0:03:30.400,0:03:36.080
an integer um so the a range for numpy is more flexible i can also deal with

0:03:34.959,0:03:38.879
floats you know when i'm doing it with range

0:03:37.200,0:03:42.239
down here i just have to have everything be an integer right so i could do like

0:03:40.480,0:03:45.680
that and maybe convert it to a list just so

0:03:43.760,0:03:50.400
it's comparable i could do that but i can't have floats so no

0:03:47.360,0:03:55.200
floats allowed except with a range right so this is

0:03:53.760,0:03:59.280
just kind of the this range is the one that's built into

0:03:56.560,0:04:05.040
python a range with numpy is more flexible okay

0:04:03.120,0:04:09.840
um let's talk about slicing so let's say i have a list like this i

0:04:06.640,0:04:16.400
have maybe like my um uh a list so i'll say a is like you know 7 8 9

0:04:13.120,0:04:21.919
10 um so i have a there this is just a regular

0:04:18.720,0:04:25.840
list right a regular python list and why am i reviewing it because numpy

0:04:24.720,0:04:29.199
is going to do something kind of different and strange and i want you to

0:04:27.280,0:04:34.400
be aware of that and uh and if i do something like this

0:04:30.960,0:04:38.160
let's say i take a slice of it and there's different slices i could

0:04:36.240,0:04:42.160
take for example if i want to get like uh every number from position two on i

0:04:40.160,0:04:48.160
could do that oh i need to put a there uh and then let

0:04:45.600,0:04:54.080
me peek at b oh that works fine um it turns out that

0:04:51.600,0:04:56.639
slicing is actually much more flexible um

0:04:54.800,0:05:01.280
in python than this so in general i can have a start an

0:04:57.919,0:05:04.320
end and then a step actually very similar to the way

0:05:02.400,0:05:08.880
range works right that also had a start and end in a step

0:05:06.000,0:05:11.840
and um you can leave any of these blank if you want and

0:05:10.080,0:05:15.919
uh and if you want to if you're leaving the blank you can even

0:05:13.759,0:05:19.440
choose right i can i can leave this off and then if i'm doing that i can also

0:05:17.199,0:05:22.639
delete that if i wanted to and uh and so let me think about how i

0:05:21.440,0:05:27.919
might do this let's say i want to start at position one

0:05:24.800,0:05:32.160
and that would be the eight and then i want to end at

0:05:28.800,0:05:36.400
position four right so this is index three and so four is just passed out by

0:05:35.039,0:05:39.199
this exclusive so it takes me to the end of the list and then i could say i want

0:05:38.720,0:05:43.440
to step two what that will mean is i'll start

0:05:41.759,0:05:45.600
here at eight and then i'll jump two to here

0:05:44.240,0:05:48.880
and then i'm done right so this is just gonna be eight and ten

0:05:47.440,0:05:53.600
and if i wanted to i could leave this blank to say hey i wanna do

0:05:50.880,0:05:56.960
start at position one and then kind of take every other number

0:05:55.440,0:06:02.720
until i reach the end right so i can do that i'm just getting the eight

0:05:59.199,0:06:08.479
and the ten okay very cool um if i wanted to i could do this i could

0:06:06.319,0:06:11.759
say like b let me make a note here this creates a

0:06:10.560,0:06:16.880
new list and so if i do something like this if i

0:06:13.039,0:06:23.280
say b negative 1 equals 100 and then if i print a and i print b

0:06:20.880,0:06:27.840
well okay so there's b it changed the last item in b to 100

0:06:25.440,0:06:31.039
and it didn't affect a right because the minute i run this

0:06:29.199,0:06:36.080
you know this is a creates a new list for b

0:06:32.319,0:06:40.720
not related to a anymore right they're they're detached after that

0:06:39.600,0:06:42.800
and so maybe you can see where i'm heading this is maybe a little bit

0:06:41.840,0:06:47.360
different when i'm dealing with uh uh numpy arrays

0:06:46.160,0:06:54.000
okay so i'm gonna do this i'm going to do it all again and i'm going to say

0:06:50.479,0:06:58.400
uh i want to create a numpy array so i'm going to say

0:06:54.479,0:07:05.120
a equals some pi dot array like that that's all good we run the

0:07:02.319,0:07:13.840
same thing here and this does not it turns out does not

0:07:09.919,0:07:20.240
create a separate uh space to store the numbers right so i do that

0:07:17.919,0:07:22.880
and there's b right ib has these two things

0:07:20.960,0:07:28.400
and because it does not create separate space for the numpy arrays

0:07:25.440,0:07:33.360
when i run this cell you're gonna see that changing this to 100

0:07:30.880,0:07:38.240
actually changes both of my numbers right so it changes um

0:07:35.520,0:07:43.520
changes both a and b right these are still associated with each other

0:07:40.400,0:07:47.280
um if i actually want to decouple them right i actually use different memory

0:07:45.120,0:07:51.039
for my um for my two arrays i could say something like this b equals

0:07:49.039,0:07:58.639
b dot copy uh you know copy makes a new array

0:07:54.639,0:08:02.879
not associated with previous one so if i do that and then let me i'll

0:08:00.720,0:08:08.879
just try add all of this again um now i'll change it to be 200

0:08:06.240,0:08:11.120
i run that i see that i'm changing my b array down here right now the last

0:08:10.560,0:08:17.280
element in b is 200

0:08:14.400,0:08:21.520
uh but i'm not messing up a anymore right because now b

0:08:19.680,0:08:25.599
it has its own memory for its own numbers

0:08:23.199,0:08:28.319
um okay so just be aware of that it's kind of a fundamental difference between

0:08:27.199,0:08:32.560
arrays and in lists

